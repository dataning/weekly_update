{"title":"Presidential Approval Ratings","markdown":{"yaml":{"title":"Presidential Approval Ratings","format":{"html":{"echo":false,"embed-resources":true}},"include-in-header":[{"text":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.8.1/prop-types.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/recharts/2.10.3/Recharts.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n"}]},"headingText":"Read the CSV file","containsRefs":false,"markdown":"\n\n```{python}\n#| output: asis\nimport polars as pl\nimport json\n\ndf = pl.read_csv('presidential_approval.csv')\n\n# Create a list to store the processed data\npresidents_data = []\n\n# Get unique presidents\nunique_presidents = df.get_column('president').unique().to_list()\n\nfor president in unique_presidents:\n    president_df = df.filter(pl.col('president') == president)\n    years = president_df.get_column('years')[0]\n    \n    data_points = []\n    for row in president_df.iter_rows(named=True):\n        data_points.append({\n            'month': int(row['year_in_term'] * 12),\n            'approval': row['approval'],\n            'disapproval': row['disapproval']\n        })\n    \n    president_obj = {\n        'name': president,\n        'years': years,\n        'data': data_points\n    }\n    \n    presidents_data.append(president_obj)\n\nprint(f\"<script>const presidentsData = {json.dumps(presidents_data)};</script>\")\n```\n\n```{=html}\n<div class=\"visualization-container\" style=\"position: relative; max-width: 1200px; margin: 0 auto; background-color: white;\">\n    <!-- Content to be exported -->\n    <div class=\"export-content\" style=\"background-color: white;\">\n        <div style=\"text-align: center; padding: 20px 0 30px 0;\">\n            <h1 style=\"margin: 0; font-size: 2em; color: #333;\">Presidential Approval Ratings</h1>\n            <p style=\"margin: 10px 0 0 0; font-size: 1.1em; color: #666;\">Tracking Presidential Performance Through the Years</p>\n        </div>\n        <div id=\"presidential-approval\"></div>\n    </div>\n    \n    <!-- Button container -->\n    <div style=\"text-align: right; padding: 20px;\">\n        <button id=\"export-button\" style=\"padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Export as PNG\n        </button>\n    </div>\n</div>\n\n<script>\nconst { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip, Legend } = Recharts;\n\nconst CustomTooltip = ({ active, payload, label }) => {\n  if (active && payload && payload.length) {\n    return React.createElement('div', {\n      style: {\n        backgroundColor: 'white',\n        padding: '8px',\n        border: '1px solid #ccc',\n        borderRadius: '4px'\n      }\n    }, [\n      React.createElement('p', { key: 'year', style: { fontWeight: 'bold' } }, `Year ${label/12}`),\n      React.createElement('p', { key: 'approval' }, `Approval: ${payload[0].value}%`),\n      React.createElement('p', { key: 'disapproval', style: { color: '#4CAF50' } }, `Disapproval: ${payload[1].value}%`)\n    ]);\n  }\n  return null;\n};\n\nconst App = () => {\n  return React.createElement('div', {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(3, 1fr)',\n      gap: '1.5rem',\n      padding: '1rem',\n      width: '100%',\n      backgroundColor: 'white'\n    }\n  }, presidentsData.map(president => \n    React.createElement('div', {\n      key: president.name,\n      style: {\n        border: '1px solid #ccc',\n        borderRadius: '8px',\n        padding: '1rem',\n        backgroundColor: 'white'\n      }\n    }, [\n      React.createElement('div', {\n        key: 'header',\n        style: { \n          fontSize: '1.125rem',\n          fontWeight: '600',\n          marginBottom: '0.25rem'\n        }\n      }, [\n        president.name,\n        React.createElement('span', {\n          key: 'years',\n          style: {\n            color: '#666',\n            fontSize: '0.875rem',\n            marginLeft: '0.5rem'\n          }\n        }, president.years)\n      ]),\n      React.createElement('div', {\n        key: 'chart',\n        style: { height: '240px' }\n      }, React.createElement(ResponsiveContainer, { width: '100%', height: '100%' },\n        React.createElement(LineChart, {\n          data: president.data,\n          margin: { top: 5, right: 30, bottom: 10, left: 5 }\n        }, [\n          React.createElement(CartesianGrid, { key: 'grid', strokeDasharray: '3 3' }),\n          React.createElement(XAxis, {\n            key: 'xaxis',\n            dataKey: 'month',\n            type: 'number',\n            domain: [0, 48],\n            ticks: [0, 12, 24, 36, 48],\n            label: { value: 'Years', position: 'bottom' }\n          }),\n          React.createElement(YAxis, {\n            key: 'yaxis',\n            domain: [20, 80],\n            ticks: [20, 50, 80]\n          }),\n          React.createElement(Tooltip, {\n            key: 'tooltip',\n            content: CustomTooltip\n          }),\n          React.createElement(Legend, {\n            key: 'legend',\n            verticalAlign: 'bottom',\n            align: 'center',\n            wrapperStyle: { paddingTop: '30px' },\n            iconType: 'circle'\n          }),\n          React.createElement(Line, {\n            key: 'approval',\n            type: 'monotone',\n            dataKey: 'approval',\n            name: 'Approval',\n            stroke: '#000000',\n            dot: false,\n            strokeWidth: 2,\n            activeDot: { r: 4 }\n          }),\n          React.createElement(Line, {\n            key: 'disapproval',\n            type: 'monotone',\n            dataKey: 'disapproval',\n            name: 'Disapproval',\n            stroke: '#4CAF50',\n            dot: false,\n            strokeWidth: 2,\n            activeDot: { r: 4 }\n          })\n        ])\n      ))\n    ])\n  ));\n};\n\n// Render the app\nconst container = document.getElementById('presidential-approval');\nconst root = ReactDOM.createRoot(container);\nroot.render(React.createElement(App));\n\n// Add export functionality\ndocument.getElementById('export-button').addEventListener('click', async () => {\n    try {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        const element = document.querySelector('.visualization-container');\n        if (!element) {\n            throw new Error('Could not find the visualization container');\n        }\n        \n        const canvas = await html2canvas(element, {\n            backgroundColor: 'white',\n            scale: 2,\n            logging: true,\n            width: element.offsetWidth,\n            height: element.offsetHeight,\n            useCORS: true\n        });\n        \n        const link = document.createElement('a');\n        link.download = 'presidential_approval_ratings.png';\n        link.href = canvas.toDataURL('image/png');\n        link.click();\n    } catch (error) {\n        console.error('Error during export:', error);\n        alert('There was an error exporting the chart. Please check the console for details.');\n    }\n});\n</script>\n\n<style>\n#presidential-approval {\n  width: 100%;\n  margin: 0 auto;\n}\n\n#export-button:hover {\n  background-color: #45a049;\n}\n\n.visualization-container {\n  background-color: white;\n}\n</style>\n```","srcMarkdownNoYaml":"\n\n```{python}\n#| output: asis\nimport polars as pl\nimport json\n\n# Read the CSV file\ndf = pl.read_csv('presidential_approval.csv')\n\n# Create a list to store the processed data\npresidents_data = []\n\n# Get unique presidents\nunique_presidents = df.get_column('president').unique().to_list()\n\nfor president in unique_presidents:\n    president_df = df.filter(pl.col('president') == president)\n    years = president_df.get_column('years')[0]\n    \n    data_points = []\n    for row in president_df.iter_rows(named=True):\n        data_points.append({\n            'month': int(row['year_in_term'] * 12),\n            'approval': row['approval'],\n            'disapproval': row['disapproval']\n        })\n    \n    president_obj = {\n        'name': president,\n        'years': years,\n        'data': data_points\n    }\n    \n    presidents_data.append(president_obj)\n\nprint(f\"<script>const presidentsData = {json.dumps(presidents_data)};</script>\")\n```\n\n```{=html}\n<div class=\"visualization-container\" style=\"position: relative; max-width: 1200px; margin: 0 auto; background-color: white;\">\n    <!-- Content to be exported -->\n    <div class=\"export-content\" style=\"background-color: white;\">\n        <div style=\"text-align: center; padding: 20px 0 30px 0;\">\n            <h1 style=\"margin: 0; font-size: 2em; color: #333;\">Presidential Approval Ratings</h1>\n            <p style=\"margin: 10px 0 0 0; font-size: 1.1em; color: #666;\">Tracking Presidential Performance Through the Years</p>\n        </div>\n        <div id=\"presidential-approval\"></div>\n    </div>\n    \n    <!-- Button container -->\n    <div style=\"text-align: right; padding: 20px;\">\n        <button id=\"export-button\" style=\"padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Export as PNG\n        </button>\n    </div>\n</div>\n\n<script>\nconst { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip, Legend } = Recharts;\n\nconst CustomTooltip = ({ active, payload, label }) => {\n  if (active && payload && payload.length) {\n    return React.createElement('div', {\n      style: {\n        backgroundColor: 'white',\n        padding: '8px',\n        border: '1px solid #ccc',\n        borderRadius: '4px'\n      }\n    }, [\n      React.createElement('p', { key: 'year', style: { fontWeight: 'bold' } }, `Year ${label/12}`),\n      React.createElement('p', { key: 'approval' }, `Approval: ${payload[0].value}%`),\n      React.createElement('p', { key: 'disapproval', style: { color: '#4CAF50' } }, `Disapproval: ${payload[1].value}%`)\n    ]);\n  }\n  return null;\n};\n\nconst App = () => {\n  return React.createElement('div', {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(3, 1fr)',\n      gap: '1.5rem',\n      padding: '1rem',\n      width: '100%',\n      backgroundColor: 'white'\n    }\n  }, presidentsData.map(president => \n    React.createElement('div', {\n      key: president.name,\n      style: {\n        border: '1px solid #ccc',\n        borderRadius: '8px',\n        padding: '1rem',\n        backgroundColor: 'white'\n      }\n    }, [\n      React.createElement('div', {\n        key: 'header',\n        style: { \n          fontSize: '1.125rem',\n          fontWeight: '600',\n          marginBottom: '0.25rem'\n        }\n      }, [\n        president.name,\n        React.createElement('span', {\n          key: 'years',\n          style: {\n            color: '#666',\n            fontSize: '0.875rem',\n            marginLeft: '0.5rem'\n          }\n        }, president.years)\n      ]),\n      React.createElement('div', {\n        key: 'chart',\n        style: { height: '240px' }\n      }, React.createElement(ResponsiveContainer, { width: '100%', height: '100%' },\n        React.createElement(LineChart, {\n          data: president.data,\n          margin: { top: 5, right: 30, bottom: 10, left: 5 }\n        }, [\n          React.createElement(CartesianGrid, { key: 'grid', strokeDasharray: '3 3' }),\n          React.createElement(XAxis, {\n            key: 'xaxis',\n            dataKey: 'month',\n            type: 'number',\n            domain: [0, 48],\n            ticks: [0, 12, 24, 36, 48],\n            label: { value: 'Years', position: 'bottom' }\n          }),\n          React.createElement(YAxis, {\n            key: 'yaxis',\n            domain: [20, 80],\n            ticks: [20, 50, 80]\n          }),\n          React.createElement(Tooltip, {\n            key: 'tooltip',\n            content: CustomTooltip\n          }),\n          React.createElement(Legend, {\n            key: 'legend',\n            verticalAlign: 'bottom',\n            align: 'center',\n            wrapperStyle: { paddingTop: '30px' },\n            iconType: 'circle'\n          }),\n          React.createElement(Line, {\n            key: 'approval',\n            type: 'monotone',\n            dataKey: 'approval',\n            name: 'Approval',\n            stroke: '#000000',\n            dot: false,\n            strokeWidth: 2,\n            activeDot: { r: 4 }\n          }),\n          React.createElement(Line, {\n            key: 'disapproval',\n            type: 'monotone',\n            dataKey: 'disapproval',\n            name: 'Disapproval',\n            stroke: '#4CAF50',\n            dot: false,\n            strokeWidth: 2,\n            activeDot: { r: 4 }\n          })\n        ])\n      ))\n    ])\n  ));\n};\n\n// Render the app\nconst container = document.getElementById('presidential-approval');\nconst root = ReactDOM.createRoot(container);\nroot.render(React.createElement(App));\n\n// Add export functionality\ndocument.getElementById('export-button').addEventListener('click', async () => {\n    try {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        const element = document.querySelector('.visualization-container');\n        if (!element) {\n            throw new Error('Could not find the visualization container');\n        }\n        \n        const canvas = await html2canvas(element, {\n            backgroundColor: 'white',\n            scale: 2,\n            logging: true,\n            width: element.offsetWidth,\n            height: element.offsetHeight,\n            useCORS: true\n        });\n        \n        const link = document.createElement('a');\n        link.download = 'presidential_approval_ratings.png';\n        link.href = canvas.toDataURL('image/png');\n        link.click();\n    } catch (error) {\n        console.error('Error during export:', error);\n        alert('There was an error exporting the chart. Please check the console for details.');\n    }\n});\n</script>\n\n<style>\n#presidential-approval {\n  width: 100%;\n  margin: 0 auto;\n}\n\n#export-button:hover {\n  background-color: #45a049;\n}\n\n.visualization-container {\n  background-color: white;\n}\n</style>\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"embed-resources":true,"include-in-header":[{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n"},{"text":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.8.1/prop-types.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/recharts/2.10.3/Recharts.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n"}],"output-file":"05_rechart.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","theme":"cosmo","code-copy":true,"mainfont":"Inter","grid":{"sidebar-width":"250px","body-width":"1600px","margin-width":"250px","gutter-width":"1.5rem"},"title":"Presidential Approval Ratings"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}