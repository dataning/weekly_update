{"title":"Presidential Approval Ratings Over Time","markdown":{"yaml":{"title":"Presidential Approval Ratings Over Time","format":{"html":{"embed-resources":true,"include-in-header":[{"text":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/highcharts.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/highcharts-more.js\"></script>\n<script src=\"https://code.highcharts.com/modules/grid-axis.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/exporting.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/offline-exporting.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/export-data.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/accessibility.js\"></script>\n<script src=\"https://code.highcharts.com/modules/pattern-fill.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n"}]}}},"headingText":"Read and process the data","containsRefs":false,"markdown":"\n\n```{python}\n#| echo: false\n#| output: asis\n\nimport polars as pl\nimport json\n\ndef process_presidential_data(df):\n    # Get unique presidents\n    unique_presidents = df.select('president').unique().to_series().to_list()\n    presidents_data = []\n    \n    for president in unique_presidents:\n        # Filter data for current president\n        president_df = df.filter(pl.col('president') == president)\n        \n        # Get the first row's years value for this president\n        years = president_df.select('years').row(0)[0]\n        \n        # Get values in order of year_in_term\n        sorted_df = president_df.sort('year_in_term')\n        approval_values = sorted_df.select('approval').to_series().to_list()\n        disapproval_values = sorted_df.select('disapproval').to_series().to_list()\n        change_status_values = sorted_df.select('change_status').to_series().to_list()\n        \n        # Create range data for the area between lines\n        range_data = [[apr, dis] for apr, dis in zip(approval_values, disapproval_values)]\n        \n        # Create clean ID from president name\n        clean_id = president.lower().replace(' ', '').replace('.', '')\n        \n        president_data = {\n            'id': clean_id,\n            'name': president,\n            'years': years,\n            'approval': approval_values,\n            'disapproval': disapproval_values,\n            'range': range_data,\n            'change_status': change_status_values\n        }\n        presidents_data.append(president_data)\n    \n    return presidents_data\n\ndf = pl.read_csv('presidential_approval.csv')\n\ndf_with_diff = df.with_columns([\n    pl.struct(['approval', 'disapproval'])\n    .map_elements(\n        lambda x: \n            f\"Approval +{x['approval'] - x['disapproval']}%\" \n            if x['approval'] > x['disapproval']\n            else f\"Disapproval +{x['disapproval'] - x['approval']}%\",\n        return_dtype=pl.Utf8  # Specify return type as string\n    ).alias('change_status')\n])\n\ndf_with_diff = df_with_diff.sort(['president', 'year_in_term'])\n\nchart_data = process_presidential_data(df_with_diff)\n\n# Convert to JSON and output as JavaScript\nprint(\"<script>\")\nprint(f\"const multi_chartData = {json.dumps(chart_data)};\")\nprint(\"</script>\")\n```\n\n```{=html}\n<div style=\"padding: 20px;\">\n    <div id=\"export-container\" style=\"background-color: white;\">\n        <!-- Title section -->\n        <div style=\"text-align: center; padding: 20px 0 30px 0;\">\n            <h1 style=\"margin: 0; font-size: 2em; color: #333;\">Presidential Approval Ratings</h1>\n            <p style=\"margin: 10px 0 0 0; font-size: 1.1em; color: #666;\">Tracking Presidential Performance Through the Years</p>\n        </div>\n        \n        <!-- Charts grid -->\n        <div id=\"chartsContainer\" style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;\">\n            <div id=\"donaldtrump\" style=\"min-width: 300px;\"></div>\n            <div id=\"barackobama\" style=\"min-width: 300px;\"></div>\n            <div id=\"georgewbush\" style=\"min-width: 300px;\"></div>\n            <div id=\"billclinton\" style=\"min-width: 300px;\"></div>\n            <div id=\"georgehwbush\" style=\"min-width: 300px;\"></div>\n            <div id=\"ronaldreagan\" style=\"min-width: 300px;\"></div>\n            <div id=\"jimmycarter\" style=\"min-width: 300px;\"></div>\n            <div id=\"geraldford\" style=\"min-width: 300px;\"></div>\n            <div id=\"richardnixon\" style=\"min-width: 300px;\"></div>\n        </div>\n    </div>\n    \n    <!-- Button container -->\n    <div style=\"text-align: center; padding: 20px;\">\n        <button onclick=\"exportCharts()\" id=\"export-button\" style=\"padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Export as PNG\n        </button>\n    </div>\n</div>\n\n<script>\n// Add event listener to the export button\ndocument.getElementById('export-button').addEventListener('click', exportCharts);\n\nfunction exportCharts() {\n    const container = document.getElementById('export-container');\n    \n    html2canvas(container, {\n        backgroundColor: 'white',\n        scale: 2, // Increase quality\n        logging: true,\n        onclone: function(clonedDoc) {\n            // Any modifications to the cloned document before capture\n        }\n    }).then(canvas => {\n        // Convert canvas to PNG and trigger download\n        const link = document.createElement('a');\n        link.download = 'presidential_approval_charts.png';\n        link.href = canvas.toDataURL('image/png');\n        link.click();\n    });\n}\n\n// Create charts\ndocument.addEventListener('DOMContentLoaded', function() {\n    multi_chartData.forEach(president => {        \n        Highcharts.chart(president.id, {\n            exporting: { enabled: false },\n            title: {\n                text: `${president.name}<br><span style=\"font-size: 12px; color: #666;\">${president.years}</span>`,\n                useHTML: true\n            },\n            yAxis: {\n                title: { text: 'Rating (%)' },\n                min: 20,\n                max: 80,\n                gridLineWidth: 1\n            },\n            xAxis: {\n                title: { text: 'Years' },\n                categories: ['0', '1', '2', '3', '4'],\n                gridLineWidth: 1\n            },\n            legend: {\n                align: 'center',\n                verticalAlign: 'bottom'\n            },\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: false,\n                        radius: 3\n                    }\n                },\n                spline: {\n                    tension: 0.4,\n                    step: false\n                }\n            },\n            tooltip: {\n                shared: true,\n                crosshairs: true,\n                useHTML: true,\n                formatter: function() {\n                    let approveValue, disapproveValue;\n                    this.points.forEach(point => {\n                        if (point.series.name === 'Approval') {\n                            approveValue = point.y;\n                        } else if (point.series.name === 'Disapproval') {\n                            disapproveValue = point.y;\n                        }\n                    });\n                    \n                    const difference = approveValue - disapproveValue;\n                    const differenceText = difference > 0 ?\n                        `Approval +${difference.toFixed(1)}%` :\n                        `Disapproval +${(-difference).toFixed(1)}%`;\n                    const differenceColor = difference > 0 ? '#059669' : '#EC4899';\n                    \n                    return `\n                        <div style=\"font-family: sans-serif;\">\n                            <div style=\"font-size: 0.9em; color: #666; margin-bottom: 8px;\">Year ${this.x}</div>\n                            <div style=\"margin-bottom: 4px;\">\n                                <span style=\"color: #059669\">●</span> Approval:\n                                <b>${approveValue?.toFixed(1)}%</b>\n                            </div>\n                            <div style=\"margin-bottom: 8px;\">\n                                <span style=\"color: #EC4899\">●</span> Disapproval:\n                                <b>${disapproveValue?.toFixed(1)}%</b>\n                            </div>\n                            <div style=\"padding-top: 8px; border-top: 1px solid #eee;\">\n                                <span style=\"color: ${differenceColor}; font-weight: 500\">\n                                    ${differenceText}\n                                </span>\n                            </div>\n                        </div>\n                    `;\n                }\n            },\n            series: [{\n                name: 'Approval',\n                type: 'spline',\n                data: president.approval,\n                color: '#059669',\n                lineWidth: 2,\n                zIndex: 2,\n                marker: {\n                    enabled: false,\n                    radius: 3\n                }\n            }, {\n                name: 'Disapproval',\n                type: 'spline',\n                data: president.disapproval,\n                color: '#EC4899',\n                lineWidth: 2,\n                zIndex: 2,\n                marker: {\n                    enabled: false,\n                    radius: 3\n                }\n            }, {\n                type: 'areasplinerange',\n                name: 'Range',\n                data: president.range,\n                color: '#6B7280',\n                fillOpacity: 0.1,\n                lineWidth: 0,\n                showInLegend: false,\n                enableMouseTracking: false,\n                zIndex: 1\n            }],\n            credits: {\n                enabled: false\n            }\n        });\n    });\n});\n</script>\n\n<style>\n#export-button:hover {\n    background-color: #45a049;\n}\n</style>\n```","srcMarkdownNoYaml":"\n\n```{python}\n#| echo: false\n#| output: asis\n\nimport polars as pl\nimport json\n\ndef process_presidential_data(df):\n    # Get unique presidents\n    unique_presidents = df.select('president').unique().to_series().to_list()\n    presidents_data = []\n    \n    for president in unique_presidents:\n        # Filter data for current president\n        president_df = df.filter(pl.col('president') == president)\n        \n        # Get the first row's years value for this president\n        years = president_df.select('years').row(0)[0]\n        \n        # Get values in order of year_in_term\n        sorted_df = president_df.sort('year_in_term')\n        approval_values = sorted_df.select('approval').to_series().to_list()\n        disapproval_values = sorted_df.select('disapproval').to_series().to_list()\n        change_status_values = sorted_df.select('change_status').to_series().to_list()\n        \n        # Create range data for the area between lines\n        range_data = [[apr, dis] for apr, dis in zip(approval_values, disapproval_values)]\n        \n        # Create clean ID from president name\n        clean_id = president.lower().replace(' ', '').replace('.', '')\n        \n        president_data = {\n            'id': clean_id,\n            'name': president,\n            'years': years,\n            'approval': approval_values,\n            'disapproval': disapproval_values,\n            'range': range_data,\n            'change_status': change_status_values\n        }\n        presidents_data.append(president_data)\n    \n    return presidents_data\n\n# Read and process the data\ndf = pl.read_csv('presidential_approval.csv')\n\ndf_with_diff = df.with_columns([\n    pl.struct(['approval', 'disapproval'])\n    .map_elements(\n        lambda x: \n            f\"Approval +{x['approval'] - x['disapproval']}%\" \n            if x['approval'] > x['disapproval']\n            else f\"Disapproval +{x['disapproval'] - x['approval']}%\",\n        return_dtype=pl.Utf8  # Specify return type as string\n    ).alias('change_status')\n])\n\ndf_with_diff = df_with_diff.sort(['president', 'year_in_term'])\n\nchart_data = process_presidential_data(df_with_diff)\n\n# Convert to JSON and output as JavaScript\nprint(\"<script>\")\nprint(f\"const multi_chartData = {json.dumps(chart_data)};\")\nprint(\"</script>\")\n```\n\n```{=html}\n<div style=\"padding: 20px;\">\n    <div id=\"export-container\" style=\"background-color: white;\">\n        <!-- Title section -->\n        <div style=\"text-align: center; padding: 20px 0 30px 0;\">\n            <h1 style=\"margin: 0; font-size: 2em; color: #333;\">Presidential Approval Ratings</h1>\n            <p style=\"margin: 10px 0 0 0; font-size: 1.1em; color: #666;\">Tracking Presidential Performance Through the Years</p>\n        </div>\n        \n        <!-- Charts grid -->\n        <div id=\"chartsContainer\" style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;\">\n            <div id=\"donaldtrump\" style=\"min-width: 300px;\"></div>\n            <div id=\"barackobama\" style=\"min-width: 300px;\"></div>\n            <div id=\"georgewbush\" style=\"min-width: 300px;\"></div>\n            <div id=\"billclinton\" style=\"min-width: 300px;\"></div>\n            <div id=\"georgehwbush\" style=\"min-width: 300px;\"></div>\n            <div id=\"ronaldreagan\" style=\"min-width: 300px;\"></div>\n            <div id=\"jimmycarter\" style=\"min-width: 300px;\"></div>\n            <div id=\"geraldford\" style=\"min-width: 300px;\"></div>\n            <div id=\"richardnixon\" style=\"min-width: 300px;\"></div>\n        </div>\n    </div>\n    \n    <!-- Button container -->\n    <div style=\"text-align: center; padding: 20px;\">\n        <button onclick=\"exportCharts()\" id=\"export-button\" style=\"padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Export as PNG\n        </button>\n    </div>\n</div>\n\n<script>\n// Add event listener to the export button\ndocument.getElementById('export-button').addEventListener('click', exportCharts);\n\nfunction exportCharts() {\n    const container = document.getElementById('export-container');\n    \n    html2canvas(container, {\n        backgroundColor: 'white',\n        scale: 2, // Increase quality\n        logging: true,\n        onclone: function(clonedDoc) {\n            // Any modifications to the cloned document before capture\n        }\n    }).then(canvas => {\n        // Convert canvas to PNG and trigger download\n        const link = document.createElement('a');\n        link.download = 'presidential_approval_charts.png';\n        link.href = canvas.toDataURL('image/png');\n        link.click();\n    });\n}\n\n// Create charts\ndocument.addEventListener('DOMContentLoaded', function() {\n    multi_chartData.forEach(president => {        \n        Highcharts.chart(president.id, {\n            exporting: { enabled: false },\n            title: {\n                text: `${president.name}<br><span style=\"font-size: 12px; color: #666;\">${president.years}</span>`,\n                useHTML: true\n            },\n            yAxis: {\n                title: { text: 'Rating (%)' },\n                min: 20,\n                max: 80,\n                gridLineWidth: 1\n            },\n            xAxis: {\n                title: { text: 'Years' },\n                categories: ['0', '1', '2', '3', '4'],\n                gridLineWidth: 1\n            },\n            legend: {\n                align: 'center',\n                verticalAlign: 'bottom'\n            },\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: false,\n                        radius: 3\n                    }\n                },\n                spline: {\n                    tension: 0.4,\n                    step: false\n                }\n            },\n            tooltip: {\n                shared: true,\n                crosshairs: true,\n                useHTML: true,\n                formatter: function() {\n                    let approveValue, disapproveValue;\n                    this.points.forEach(point => {\n                        if (point.series.name === 'Approval') {\n                            approveValue = point.y;\n                        } else if (point.series.name === 'Disapproval') {\n                            disapproveValue = point.y;\n                        }\n                    });\n                    \n                    const difference = approveValue - disapproveValue;\n                    const differenceText = difference > 0 ?\n                        `Approval +${difference.toFixed(1)}%` :\n                        `Disapproval +${(-difference).toFixed(1)}%`;\n                    const differenceColor = difference > 0 ? '#059669' : '#EC4899';\n                    \n                    return `\n                        <div style=\"font-family: sans-serif;\">\n                            <div style=\"font-size: 0.9em; color: #666; margin-bottom: 8px;\">Year ${this.x}</div>\n                            <div style=\"margin-bottom: 4px;\">\n                                <span style=\"color: #059669\">●</span> Approval:\n                                <b>${approveValue?.toFixed(1)}%</b>\n                            </div>\n                            <div style=\"margin-bottom: 8px;\">\n                                <span style=\"color: #EC4899\">●</span> Disapproval:\n                                <b>${disapproveValue?.toFixed(1)}%</b>\n                            </div>\n                            <div style=\"padding-top: 8px; border-top: 1px solid #eee;\">\n                                <span style=\"color: ${differenceColor}; font-weight: 500\">\n                                    ${differenceText}\n                                </span>\n                            </div>\n                        </div>\n                    `;\n                }\n            },\n            series: [{\n                name: 'Approval',\n                type: 'spline',\n                data: president.approval,\n                color: '#059669',\n                lineWidth: 2,\n                zIndex: 2,\n                marker: {\n                    enabled: false,\n                    radius: 3\n                }\n            }, {\n                name: 'Disapproval',\n                type: 'spline',\n                data: president.disapproval,\n                color: '#EC4899',\n                lineWidth: 2,\n                zIndex: 2,\n                marker: {\n                    enabled: false,\n                    radius: 3\n                }\n            }, {\n                type: 'areasplinerange',\n                name: 'Range',\n                data: president.range,\n                color: '#6B7280',\n                fillOpacity: 0.1,\n                lineWidth: 0,\n                showInLegend: false,\n                enableMouseTracking: false,\n                zIndex: 1\n            }],\n            credits: {\n                enabled: false\n            }\n        });\n    });\n});\n</script>\n\n<style>\n#export-button:hover {\n    background-color: #45a049;\n}\n</style>\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"embed-resources":true,"include-in-header":[{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n"},{"text":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/highcharts.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/highcharts-more.js\"></script>\n<script src=\"https://code.highcharts.com/modules/grid-axis.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/exporting.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/offline-exporting.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/export-data.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/accessibility.js\"></script>\n<script src=\"https://code.highcharts.com/modules/pattern-fill.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n"}],"output-file":"06_highcharts_backup.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","theme":"cosmo","code-copy":true,"mainfont":"Inter","grid":{"sidebar-width":"250px","body-width":"1600px","margin-width":"250px","gutter-width":"1.5rem"},"title":"Presidential Approval Ratings Over Time"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}