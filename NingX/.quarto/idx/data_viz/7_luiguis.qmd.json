{"title":"Luigi Mangione Extradition Probability","markdown":{"yaml":{"title":"Luigi Mangione Extradition Probability","date":"last-modified","author":"Your Name Here","format":{"html":{"echo":false,"embed-resources":true,"include-in-header":[{"text":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/highcharts.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/exporting.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/export-data.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/accessibility.js\"></script>\n"}]}},"execute":{"allow":true}},"headingText":"Process data","containsRefs":false,"markdown":"\n\n```{python}\n#| echo: false\n#| output: asis\n\nimport polars as pl\nimport json\nfrom datetime import datetime\n\ndef process_market_data(df):\n    series_data = []\n    \n    # Get unique end dates\n    end_dates = df['end_date'].unique().to_list()\n    \n    for end_date in end_dates:\n        df_market = df.filter(pl.col('end_date') == end_date)\n        \n        # Convert timestamp to milliseconds and prepare trading data\n        trading_data = (\n            df_market.select([\n                (pl.col('full_timestamp').dt.timestamp().mul(1000)).alias('x'),\n                pl.col('price').alias('y')\n            ])\n            .with_columns([\n                pl.col('x').cast(pl.Int64),\n                pl.col('y').cast(pl.Float64)\n            ])\n            .to_numpy()\n            .tolist()\n        )\n        \n        # Instead of just min and max timestamps, use all timestamps\n        # but with the same yes_quote value for each timestamp\n        yes_quote = float(df_market['yes_quote'][0])\n        yes_quote_data = [\n            [x, yes_quote] for x, _ in trading_data\n        ]\n        \n        # Format end date for display\n        display_date = end_date.strftime(\"%Y-%m-%d\") if isinstance(end_date, datetime) else str(end_date)\n        \n        # Add data series\n        series_data.extend([\n            {\n                'name': f'Trading Price (End: {display_date})',\n                'data': trading_data\n            },\n            {\n                'name': f'Current Yes Quote ({display_date})',\n                'data': yes_quote_data\n            }\n        ])\n    \n    return series_data\n\ndf = pl.read_parquet('luigi-mangione-extradited-to-new-york-in_2024-12-15.parquet')\nchart_data = process_market_data(df)\n\n# Output as JavaScript\nprint(f\"<script>const chartData = {json.dumps(chart_data)};</script>\")\n\n```\n\n\n```{=html}\n<div class=\"chart-container\">\n    <div id=\"chart\"></div>\n</div>\n\n<style>\n.chart-container {\n    background: white;\n    width: 100%;  /* Full width */\n    margin: 20px auto;\n    padding: 20px;\n}\n#chart {\n    width: 100%;\n    height: 600px;\n    min-width: 800px;  /* Minimum width */\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Process the data and add visual styling properties\n    const processedData = chartData.map(series => {\n        const isQuoteLine = series.name.includes('Quote');\n        return {\n            name: series.name,\n            data: series.data.map(point => {\n                let timestamp = Number(point[0].toString());\n                if (timestamp > 1e16) timestamp = timestamp / 1000000;\n                else if (timestamp > 1e13) timestamp = timestamp / 1000;\n                return [timestamp, point[1]];\n            }),\n            // Add specific styling for quote lines\n            opacity: isQuoteLine ? 0.3 : 1,\n            lineWidth: isQuoteLine ? 1 : 2,\n            dashStyle: isQuoteLine ? 'Dash' : 'Solid',\n            enableMouseTracking: true // Keep tooltip functionality\n        };\n    });\n\n    Highcharts.chart('chart', {\n        chart: {\n            type: 'line',\n            style: {\n                fontFamily: '-apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif'\n            }\n        },\n        \n        title: {\n            text: 'Luigi Mangione Extradition Probability',\n            align: 'left',\n            style: {\n                fontSize: '20px',\n                fontWeight: 'bold'\n            }\n        },\n\n        subtitle: {\n            text: 'Betting market probabilities by expiry date',\n            align: 'left'\n        },\n\n        xAxis: {\n            type: 'datetime',\n            dateTimeLabelFormats: {\n                millisecond: '%b %e',\n                second: '%b %e',\n                minute: '%b %e',\n                hour: '%b %e',\n                day: '%b %e',\n                week: '%b %e',\n                month: '%b',\n                year: '%Y'\n            },\n            labels: {\n                rotation: -45,\n                align: 'right',\n                style: {\n                    fontFamily: 'Inter, JetBrains Mono, monospace',\n                    fontSize: '12px',\n                    color: '#666'\n                }\n            }\n        },\n        \n        yAxis: {\n            title: { text: null },\n            min: 0,\n            max: 1,\n            tickInterval: 0.2,\n            labels: { \n                formatter: function() {\n                    return Math.round(this.value * 100) + '%';\n                },\n                style: {\n                    color: '#666666',\n                    fontSize: '14px',\n                    fontFamily: 'Inter, sans-serif'\n                }\n            },\n            gridLineWidth: 1,\n            gridLineDashStyle: 'Dot',\n            gridLineColor: '#E0E0E0'\n        },\n        \n        tooltip: {\n            shared: true,\n            useHTML: true,\n            formatter: function() {\n                if (!this.points) return false;\n                \n                const date = new Date(this.x);\n                const formattedDate = date.toLocaleDateString('en-GB', {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit'\n                });\n                \n                const expiryGroups = {};\n                \n                this.points.forEach(point => {\n                    const seriesName = point.series.name;\n                    let expiryDate = '';\n                    \n                    if (seriesName.includes('End:')) {\n                        expiryDate = seriesName.split('End: ')[1].replace(')', '');\n                    } else if (seriesName.includes('Quote')) {\n                        expiryDate = seriesName.match(/\\((.*?)\\)/)[1];\n                    }\n                    \n                    if (!expiryGroups[expiryDate]) {\n                        expiryGroups[expiryDate] = {\n                            trading: null,\n                            quote: null\n                        };\n                    }\n                    \n                    if (seriesName.includes('Trading Price')) {\n                        expiryGroups[expiryDate].trading = point.y;\n                    } else if (seriesName.includes('Quote')) {\n                        expiryGroups[expiryDate].quote = point.y;\n                    }\n                });\n                \n                let html = `<div style=\"font-family: Inter; padding: 8px;\">\n                    <div style=\"font-weight: bold; margin-bottom: 8px;\">${formattedDate}</div>`;\n                \n                Object.entries(expiryGroups).forEach(([expiryDate, values]) => {\n                    html += `<div style=\"margin-top: 8px;\">\n                        <div style=\"font-weight: bold; color: #666;\">Expiry: ${expiryDate}</div>`;\n                    \n                    if (values.trading !== null) {\n                        html += `<div style=\"color: #2f7ed8; margin: 2px 0;\">\n                            Trading: ${(values.trading * 100).toFixed(1)}%</div>`;\n                    }\n                    \n                    if (values.quote !== null) {\n                        html += `<div style=\"color: #0d233a; margin: 2px 0;\">\n                            Quote: ${(values.quote * 100).toFixed(1)}%</div>`;\n                    }\n                    \n                    if (values.trading !== null && values.quote !== null) {\n                        const diff = values.trading - values.quote;\n                        const diffColor = diff > 0 ? '#059669' : '#EC4899';\n                        html += `<div style=\"color: ${diffColor}; margin: 2px 0;\">\n                            Difference: ${(diff > 0 ? '+' : '')}${(diff * 100).toFixed(1)}%</div>`;\n                    }\n                    \n                    html += '</div>';\n                });\n                \n                html += '</div>';\n                return html;\n            }\n        },\n        \n        plotOptions: {\n            series: {\n                marker: {\n                    enabled: false,\n                    states: {\n                        hover: {\n                            enabled: true,\n                            radius: 4\n                        }\n                    }\n                },\n                states: {\n                    hover: {\n                        enabled: true,\n                        lineWidth: 4\n                    }\n                }\n            }\n        },\n        \n        legend: {\n            align: 'center',\n            verticalAlign: 'bottom',\n            layout: 'horizontal',\n            itemStyle: {\n                color: '#666',\n                fontWeight: '500',\n                fontFamily: 'Inter, sans-serif'\n            },\n        },\n        \n        series: processedData,\n        \n        credits: {\n            enabled: false\n        }\n    });\n});\n</script>\n\n\n```","srcMarkdownNoYaml":"\n\n```{python}\n#| echo: false\n#| output: asis\n\nimport polars as pl\nimport json\nfrom datetime import datetime\n\ndef process_market_data(df):\n    series_data = []\n    \n    # Get unique end dates\n    end_dates = df['end_date'].unique().to_list()\n    \n    for end_date in end_dates:\n        df_market = df.filter(pl.col('end_date') == end_date)\n        \n        # Convert timestamp to milliseconds and prepare trading data\n        trading_data = (\n            df_market.select([\n                (pl.col('full_timestamp').dt.timestamp().mul(1000)).alias('x'),\n                pl.col('price').alias('y')\n            ])\n            .with_columns([\n                pl.col('x').cast(pl.Int64),\n                pl.col('y').cast(pl.Float64)\n            ])\n            .to_numpy()\n            .tolist()\n        )\n        \n        # Instead of just min and max timestamps, use all timestamps\n        # but with the same yes_quote value for each timestamp\n        yes_quote = float(df_market['yes_quote'][0])\n        yes_quote_data = [\n            [x, yes_quote] for x, _ in trading_data\n        ]\n        \n        # Format end date for display\n        display_date = end_date.strftime(\"%Y-%m-%d\") if isinstance(end_date, datetime) else str(end_date)\n        \n        # Add data series\n        series_data.extend([\n            {\n                'name': f'Trading Price (End: {display_date})',\n                'data': trading_data\n            },\n            {\n                'name': f'Current Yes Quote ({display_date})',\n                'data': yes_quote_data\n            }\n        ])\n    \n    return series_data\n\n# Process data\ndf = pl.read_parquet('luigi-mangione-extradited-to-new-york-in_2024-12-15.parquet')\nchart_data = process_market_data(df)\n\n# Output as JavaScript\nprint(f\"<script>const chartData = {json.dumps(chart_data)};</script>\")\n\n```\n\n\n```{=html}\n<div class=\"chart-container\">\n    <div id=\"chart\"></div>\n</div>\n\n<style>\n.chart-container {\n    background: white;\n    width: 100%;  /* Full width */\n    margin: 20px auto;\n    padding: 20px;\n}\n#chart {\n    width: 100%;\n    height: 600px;\n    min-width: 800px;  /* Minimum width */\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Process the data and add visual styling properties\n    const processedData = chartData.map(series => {\n        const isQuoteLine = series.name.includes('Quote');\n        return {\n            name: series.name,\n            data: series.data.map(point => {\n                let timestamp = Number(point[0].toString());\n                if (timestamp > 1e16) timestamp = timestamp / 1000000;\n                else if (timestamp > 1e13) timestamp = timestamp / 1000;\n                return [timestamp, point[1]];\n            }),\n            // Add specific styling for quote lines\n            opacity: isQuoteLine ? 0.3 : 1,\n            lineWidth: isQuoteLine ? 1 : 2,\n            dashStyle: isQuoteLine ? 'Dash' : 'Solid',\n            enableMouseTracking: true // Keep tooltip functionality\n        };\n    });\n\n    Highcharts.chart('chart', {\n        chart: {\n            type: 'line',\n            style: {\n                fontFamily: '-apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif'\n            }\n        },\n        \n        title: {\n            text: 'Luigi Mangione Extradition Probability',\n            align: 'left',\n            style: {\n                fontSize: '20px',\n                fontWeight: 'bold'\n            }\n        },\n\n        subtitle: {\n            text: 'Betting market probabilities by expiry date',\n            align: 'left'\n        },\n\n        xAxis: {\n            type: 'datetime',\n            dateTimeLabelFormats: {\n                millisecond: '%b %e',\n                second: '%b %e',\n                minute: '%b %e',\n                hour: '%b %e',\n                day: '%b %e',\n                week: '%b %e',\n                month: '%b',\n                year: '%Y'\n            },\n            labels: {\n                rotation: -45,\n                align: 'right',\n                style: {\n                    fontFamily: 'Inter, JetBrains Mono, monospace',\n                    fontSize: '12px',\n                    color: '#666'\n                }\n            }\n        },\n        \n        yAxis: {\n            title: { text: null },\n            min: 0,\n            max: 1,\n            tickInterval: 0.2,\n            labels: { \n                formatter: function() {\n                    return Math.round(this.value * 100) + '%';\n                },\n                style: {\n                    color: '#666666',\n                    fontSize: '14px',\n                    fontFamily: 'Inter, sans-serif'\n                }\n            },\n            gridLineWidth: 1,\n            gridLineDashStyle: 'Dot',\n            gridLineColor: '#E0E0E0'\n        },\n        \n        tooltip: {\n            shared: true,\n            useHTML: true,\n            formatter: function() {\n                if (!this.points) return false;\n                \n                const date = new Date(this.x);\n                const formattedDate = date.toLocaleDateString('en-GB', {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit'\n                });\n                \n                const expiryGroups = {};\n                \n                this.points.forEach(point => {\n                    const seriesName = point.series.name;\n                    let expiryDate = '';\n                    \n                    if (seriesName.includes('End:')) {\n                        expiryDate = seriesName.split('End: ')[1].replace(')', '');\n                    } else if (seriesName.includes('Quote')) {\n                        expiryDate = seriesName.match(/\\((.*?)\\)/)[1];\n                    }\n                    \n                    if (!expiryGroups[expiryDate]) {\n                        expiryGroups[expiryDate] = {\n                            trading: null,\n                            quote: null\n                        };\n                    }\n                    \n                    if (seriesName.includes('Trading Price')) {\n                        expiryGroups[expiryDate].trading = point.y;\n                    } else if (seriesName.includes('Quote')) {\n                        expiryGroups[expiryDate].quote = point.y;\n                    }\n                });\n                \n                let html = `<div style=\"font-family: Inter; padding: 8px;\">\n                    <div style=\"font-weight: bold; margin-bottom: 8px;\">${formattedDate}</div>`;\n                \n                Object.entries(expiryGroups).forEach(([expiryDate, values]) => {\n                    html += `<div style=\"margin-top: 8px;\">\n                        <div style=\"font-weight: bold; color: #666;\">Expiry: ${expiryDate}</div>`;\n                    \n                    if (values.trading !== null) {\n                        html += `<div style=\"color: #2f7ed8; margin: 2px 0;\">\n                            Trading: ${(values.trading * 100).toFixed(1)}%</div>`;\n                    }\n                    \n                    if (values.quote !== null) {\n                        html += `<div style=\"color: #0d233a; margin: 2px 0;\">\n                            Quote: ${(values.quote * 100).toFixed(1)}%</div>`;\n                    }\n                    \n                    if (values.trading !== null && values.quote !== null) {\n                        const diff = values.trading - values.quote;\n                        const diffColor = diff > 0 ? '#059669' : '#EC4899';\n                        html += `<div style=\"color: ${diffColor}; margin: 2px 0;\">\n                            Difference: ${(diff > 0 ? '+' : '')}${(diff * 100).toFixed(1)}%</div>`;\n                    }\n                    \n                    html += '</div>';\n                });\n                \n                html += '</div>';\n                return html;\n            }\n        },\n        \n        plotOptions: {\n            series: {\n                marker: {\n                    enabled: false,\n                    states: {\n                        hover: {\n                            enabled: true,\n                            radius: 4\n                        }\n                    }\n                },\n                states: {\n                    hover: {\n                        enabled: true,\n                        lineWidth: 4\n                    }\n                }\n            }\n        },\n        \n        legend: {\n            align: 'center',\n            verticalAlign: 'bottom',\n            layout: 'horizontal',\n            itemStyle: {\n                color: '#666',\n                fontWeight: '500',\n                fontFamily: 'Inter, sans-serif'\n            },\n        },\n        \n        series: processedData,\n        \n        credits: {\n            enabled: false\n        }\n    });\n});\n</script>\n\n\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"allow":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"embed-resources":true,"include-in-header":[{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n"},{"text":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/highcharts.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/exporting.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/export-data.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/accessibility.js\"></script>\n"}],"output-file":"7_luiguis.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","theme":"cosmo","code-copy":true,"mainfont":"Inter","grid":{"sidebar-width":"250px","body-width":"1600px","margin-width":"250px","gutter-width":"1.5rem"},"title":"Luigi Mangione Extradition Probability","date":"last-modified","author":"Your Name Here"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}