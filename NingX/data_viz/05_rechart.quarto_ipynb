{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Presidential Approval Ratings\"\n",
        "format: \n",
        "  html:\n",
        "    echo: false\n",
        "    embed-resources: true\n",
        "include-in-header:\n",
        "      - text: |\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.8.1/prop-types.min.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/recharts/2.10.3/Recharts.min.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n",
        "---"
      ],
      "id": "506d7c22"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: asis\n",
        "import polars as pl\n",
        "import json\n",
        "\n",
        "# Read the CSV file\n",
        "df = pl.read_csv('presidential_approval.csv')\n",
        "\n",
        "# Create a list to store the processed data\n",
        "presidents_data = []\n",
        "\n",
        "# Get unique presidents\n",
        "unique_presidents = df.get_column('president').unique().to_list()\n",
        "\n",
        "for president in unique_presidents:\n",
        "    president_df = df.filter(pl.col('president') == president)\n",
        "    years = president_df.get_column('years')[0]\n",
        "    \n",
        "    data_points = []\n",
        "    for row in president_df.iter_rows(named=True):\n",
        "        data_points.append({\n",
        "            'month': int(row['year_in_term'] * 12),\n",
        "            'approval': row['approval'],\n",
        "            'disapproval': row['disapproval']\n",
        "        })\n",
        "    \n",
        "    president_obj = {\n",
        "        'name': president,\n",
        "        'years': years,\n",
        "        'data': data_points\n",
        "    }\n",
        "    \n",
        "    presidents_data.append(president_obj)\n",
        "\n",
        "print(f\"<script>const presidentsData = {json.dumps(presidents_data)};</script>\")"
      ],
      "id": "e59b74b8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{=html}\n",
        "<div class=\"visualization-container\" style=\"position: relative; max-width: 1200px; margin: 0 auto; background-color: white;\">\n",
        "    <!-- Content to be exported -->\n",
        "    <div class=\"export-content\" style=\"background-color: white;\">\n",
        "        <div style=\"text-align: center; padding: 20px 0 30px 0;\">\n",
        "            <h1 style=\"margin: 0; font-size: 2em; color: #333;\">Presidential Approval Ratings</h1>\n",
        "            <p style=\"margin: 10px 0 0 0; font-size: 1.1em; color: #666;\">Tracking Presidential Performance Through the Years</p>\n",
        "        </div>\n",
        "        <div id=\"presidential-approval\"></div>\n",
        "    </div>\n",
        "    \n",
        "    <!-- Button container -->\n",
        "    <div style=\"text-align: right; padding: 20px;\">\n",
        "        <button id=\"export-button\" style=\"padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n",
        "            Export as PNG\n",
        "        </button>\n",
        "    </div>\n",
        "</div>\n",
        "\n",
        "<script>\n",
        "const { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip, Legend } = Recharts;\n",
        "\n",
        "const CustomTooltip = ({ active, payload, label }) => {\n",
        "  if (active && payload && payload.length) {\n",
        "    return React.createElement('div', {\n",
        "      style: {\n",
        "        backgroundColor: 'white',\n",
        "        padding: '8px',\n",
        "        border: '1px solid #ccc',\n",
        "        borderRadius: '4px'\n",
        "      }\n",
        "    }, [\n",
        "      React.createElement('p', { key: 'year', style: { fontWeight: 'bold' } }, `Year ${label/12}`),\n",
        "      React.createElement('p', { key: 'approval' }, `Approval: ${payload[0].value}%`),\n",
        "      React.createElement('p', { key: 'disapproval', style: { color: '#4CAF50' } }, `Disapproval: ${payload[1].value}%`)\n",
        "    ]);\n",
        "  }\n",
        "  return null;\n",
        "};\n",
        "\n",
        "const App = () => {\n",
        "  return React.createElement('div', {\n",
        "    style: {\n",
        "      display: 'grid',\n",
        "      gridTemplateColumns: 'repeat(3, 1fr)',\n",
        "      gap: '1.5rem',\n",
        "      padding: '1rem',\n",
        "      width: '100%',\n",
        "      backgroundColor: 'white'\n",
        "    }\n",
        "  }, presidentsData.map(president => \n",
        "    React.createElement('div', {\n",
        "      key: president.name,\n",
        "      style: {\n",
        "        border: '1px solid #ccc',\n",
        "        borderRadius: '8px',\n",
        "        padding: '1rem',\n",
        "        backgroundColor: 'white'\n",
        "      }\n",
        "    }, [\n",
        "      React.createElement('div', {\n",
        "        key: 'header',\n",
        "        style: { \n",
        "          fontSize: '1.125rem',\n",
        "          fontWeight: '600',\n",
        "          marginBottom: '0.25rem'\n",
        "        }\n",
        "      }, [\n",
        "        president.name,\n",
        "        React.createElement('span', {\n",
        "          key: 'years',\n",
        "          style: {\n",
        "            color: '#666',\n",
        "            fontSize: '0.875rem',\n",
        "            marginLeft: '0.5rem'\n",
        "          }\n",
        "        }, president.years)\n",
        "      ]),\n",
        "      React.createElement('div', {\n",
        "        key: 'chart',\n",
        "        style: { height: '240px' }\n",
        "      }, React.createElement(ResponsiveContainer, { width: '100%', height: '100%' },\n",
        "        React.createElement(LineChart, {\n",
        "          data: president.data,\n",
        "          margin: { top: 5, right: 30, bottom: 10, left: 5 }\n",
        "        }, [\n",
        "          React.createElement(CartesianGrid, { key: 'grid', strokeDasharray: '3 3' }),\n",
        "          React.createElement(XAxis, {\n",
        "            key: 'xaxis',\n",
        "            dataKey: 'month',\n",
        "            type: 'number',\n",
        "            domain: [0, 48],\n",
        "            ticks: [0, 12, 24, 36, 48],\n",
        "            label: { value: 'Years', position: 'bottom' }\n",
        "          }),\n",
        "          React.createElement(YAxis, {\n",
        "            key: 'yaxis',\n",
        "            domain: [20, 80],\n",
        "            ticks: [20, 50, 80]\n",
        "          }),\n",
        "          React.createElement(Tooltip, {\n",
        "            key: 'tooltip',\n",
        "            content: CustomTooltip\n",
        "          }),\n",
        "          React.createElement(Legend, {\n",
        "            key: 'legend',\n",
        "            verticalAlign: 'bottom',\n",
        "            align: 'center',\n",
        "            wrapperStyle: { paddingTop: '30px' },\n",
        "            iconType: 'circle'\n",
        "          }),\n",
        "          React.createElement(Line, {\n",
        "            key: 'approval',\n",
        "            type: 'monotone',\n",
        "            dataKey: 'approval',\n",
        "            name: 'Approval',\n",
        "            stroke: '#000000',\n",
        "            dot: false,\n",
        "            strokeWidth: 2,\n",
        "            activeDot: { r: 4 }\n",
        "          }),\n",
        "          React.createElement(Line, {\n",
        "            key: 'disapproval',\n",
        "            type: 'monotone',\n",
        "            dataKey: 'disapproval',\n",
        "            name: 'Disapproval',\n",
        "            stroke: '#4CAF50',\n",
        "            dot: false,\n",
        "            strokeWidth: 2,\n",
        "            activeDot: { r: 4 }\n",
        "          })\n",
        "        ])\n",
        "      ))\n",
        "    ])\n",
        "  ));\n",
        "};\n",
        "\n",
        "// Render the app\n",
        "const container = document.getElementById('presidential-approval');\n",
        "const root = ReactDOM.createRoot(container);\n",
        "root.render(React.createElement(App));\n",
        "\n",
        "// Add export functionality\n",
        "document.getElementById('export-button').addEventListener('click', async () => {\n",
        "    try {\n",
        "        await new Promise(resolve => setTimeout(resolve, 500));\n",
        "        const element = document.querySelector('.visualization-container');\n",
        "        if (!element) {\n",
        "            throw new Error('Could not find the visualization container');\n",
        "        }\n",
        "        \n",
        "        const canvas = await html2canvas(element, {\n",
        "            backgroundColor: 'white',\n",
        "            scale: 2,\n",
        "            logging: true,\n",
        "            width: element.offsetWidth,\n",
        "            height: element.offsetHeight,\n",
        "            useCORS: true\n",
        "        });\n",
        "        \n",
        "        const link = document.createElement('a');\n",
        "        link.download = 'presidential_approval_ratings.png';\n",
        "        link.href = canvas.toDataURL('image/png');\n",
        "        link.click();\n",
        "    } catch (error) {\n",
        "        console.error('Error during export:', error);\n",
        "        alert('There was an error exporting the chart. Please check the console for details.');\n",
        "    }\n",
        "});\n",
        "</script>\n",
        "\n",
        "<style>\n",
        "#presidential-approval {\n",
        "  width: 100%;\n",
        "  margin: 0 auto;\n",
        "}\n",
        "\n",
        "#export-button:hover {\n",
        "  background-color: #45a049;\n",
        "}\n",
        "\n",
        ".visualization-container {\n",
        "  background-color: white;\n",
        "}\n",
        "</style>\n",
        "```"
      ],
      "id": "5f4aa3ed"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}