{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Presidential Approval Ratings Over Time\"\n",
        "format: \n",
        "  html:\n",
        "    embed-resources: true\n",
        "    include-in-header:\n",
        "      - text: |\n",
        "          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/highcharts.js\"></script>\n",
        "          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/highcharts-more.js\"></script>\n",
        "          <script src=\"https://code.highcharts.com/modules/grid-axis.js\"></script>\n",
        "          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/exporting.js\"></script>\n",
        "          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/offline-exporting.js\"></script>\n",
        "          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/export-data.js\"></script>\n",
        "          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/accessibility.js\"></script>\n",
        "          <script src=\"https://code.highcharts.com/modules/pattern-fill.js\"></script>\n",
        "          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n",
        "---"
      ],
      "id": "0379b745"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: asis\n",
        "\n",
        "import polars as pl\n",
        "import json\n",
        "\n",
        "def process_presidential_data(df):\n",
        "    # Get unique presidents\n",
        "    unique_presidents = df.select('president').unique().to_series().to_list()\n",
        "    presidents_data = []\n",
        "    \n",
        "    for president in unique_presidents:\n",
        "        # Filter data for current president\n",
        "        president_df = df.filter(pl.col('president') == president)\n",
        "        \n",
        "        # Get the first row's years value for this president\n",
        "        years = president_df.select('years').row(0)[0]\n",
        "        \n",
        "        # Get values in order of year_in_term\n",
        "        sorted_df = president_df.sort('year_in_term')\n",
        "        approval_values = sorted_df.select('approval').to_series().to_list()\n",
        "        disapproval_values = sorted_df.select('disapproval').to_series().to_list()\n",
        "        change_status_values = sorted_df.select('change_status').to_series().to_list()\n",
        "        \n",
        "        # Create range data for the area between lines\n",
        "        range_data = [[apr, dis] for apr, dis in zip(approval_values, disapproval_values)]\n",
        "        \n",
        "        # Create clean ID from president name\n",
        "        clean_id = president.lower().replace(' ', '').replace('.', '')\n",
        "        \n",
        "        president_data = {\n",
        "            'id': clean_id,\n",
        "            'name': president,\n",
        "            'years': years,\n",
        "            'approval': approval_values,\n",
        "            'disapproval': disapproval_values,\n",
        "            'range': range_data,\n",
        "            'change_status': change_status_values\n",
        "        }\n",
        "        presidents_data.append(president_data)\n",
        "    \n",
        "    return presidents_data\n",
        "\n",
        "# Read and process the data\n",
        "df = pl.read_csv('presidential_approval.csv')\n",
        "\n",
        "df_with_diff = df.with_columns([\n",
        "    pl.struct(['approval', 'disapproval'])\n",
        "    .map_elements(\n",
        "        lambda x: \n",
        "            f\"Approval +{x['approval'] - x['disapproval']}%\" \n",
        "            if x['approval'] > x['disapproval']\n",
        "            else f\"Disapproval +{x['disapproval'] - x['approval']}%\",\n",
        "        return_dtype=pl.Utf8  # Specify return type as string\n",
        "    ).alias('change_status')\n",
        "])\n",
        "\n",
        "df_with_diff = df_with_diff.sort(['president', 'year_in_term'])\n",
        "\n",
        "chart_data = process_presidential_data(df_with_diff)\n",
        "\n",
        "# Convert to JSON and output as JavaScript\n",
        "print(\"<script>\")\n",
        "print(f\"const multi_chartData = {json.dumps(chart_data)};\")\n",
        "print(\"</script>\")"
      ],
      "id": "c2f9ac4f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{=html}\n",
        "<div style=\"padding: 20px;\">\n",
        "    <div id=\"export-container\" style=\"background-color: white;\">\n",
        "        <!-- Title section -->\n",
        "        <div style=\"text-align: center; padding: 20px 0 30px 0;\">\n",
        "            <h1 style=\"margin: 0; font-size: 2em; color: #333;\">Presidential Approval Ratings</h1>\n",
        "            <p style=\"margin: 10px 0 0 0; font-size: 1.1em; color: #666;\">Tracking Presidential Performance Through the Years</p>\n",
        "        </div>\n",
        "        \n",
        "        <!-- Charts grid -->\n",
        "        <div id=\"chartsContainer\" style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;\">\n",
        "            <div id=\"donaldtrump\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"barackobama\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"georgewbush\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"billclinton\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"georgehwbush\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"ronaldreagan\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"jimmycarter\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"geraldford\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"richardnixon\" style=\"min-width: 300px;\"></div>\n",
        "        </div>\n",
        "    </div>\n",
        "    \n",
        "    <!-- Button container -->\n",
        "    <div style=\"text-align: center; padding: 20px;\">\n",
        "        <button onclick=\"exportCharts()\" id=\"export-button\" style=\"padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n",
        "            Export as PNG\n",
        "        </button>\n",
        "    </div>\n",
        "</div>\n",
        "\n",
        "<script>\n",
        "// Add event listener to the export button\n",
        "document.getElementById('export-button').addEventListener('click', exportCharts);\n",
        "\n",
        "function exportCharts() {\n",
        "    const container = document.getElementById('export-container');\n",
        "    \n",
        "    html2canvas(container, {\n",
        "        backgroundColor: 'white',\n",
        "        scale: 2, // Increase quality\n",
        "        logging: true,\n",
        "        onclone: function(clonedDoc) {\n",
        "            // Any modifications to the cloned document before capture\n",
        "        }\n",
        "    }).then(canvas => {\n",
        "        // Convert canvas to PNG and trigger download\n",
        "        const link = document.createElement('a');\n",
        "        link.download = 'presidential_approval_charts.png';\n",
        "        link.href = canvas.toDataURL('image/png');\n",
        "        link.click();\n",
        "    });\n",
        "}\n",
        "\n",
        "// Create charts\n",
        "document.addEventListener('DOMContentLoaded', function() {\n",
        "    multi_chartData.forEach(president => {        \n",
        "        Highcharts.chart(president.id, {\n",
        "            exporting: { enabled: false },\n",
        "            title: {\n",
        "                text: `${president.name}<br><span style=\"font-size: 12px; color: #666;\">${president.years}</span>`,\n",
        "                useHTML: true\n",
        "            },\n",
        "            yAxis: {\n",
        "                title: { text: 'Rating (%)' },\n",
        "                min: 20,\n",
        "                max: 80,\n",
        "                gridLineWidth: 1\n",
        "            },\n",
        "            xAxis: {\n",
        "                title: { text: 'Years' },\n",
        "                categories: ['0', '1', '2', '3', '4'],\n",
        "                gridLineWidth: 1\n",
        "            },\n",
        "            legend: {\n",
        "                align: 'center',\n",
        "                verticalAlign: 'bottom'\n",
        "            },\n",
        "            plotOptions: {\n",
        "                series: {\n",
        "                    marker: {\n",
        "                        enabled: false,\n",
        "                        radius: 3\n",
        "                    }\n",
        "                },\n",
        "                spline: {\n",
        "                    tension: 0.4,\n",
        "                    step: false\n",
        "                }\n",
        "            },\n",
        "            tooltip: {\n",
        "                shared: true,\n",
        "                crosshairs: true,\n",
        "                useHTML: true,\n",
        "                formatter: function() {\n",
        "                    let approveValue, disapproveValue;\n",
        "                    this.points.forEach(point => {\n",
        "                        if (point.series.name === 'Approval') {\n",
        "                            approveValue = point.y;\n",
        "                        } else if (point.series.name === 'Disapproval') {\n",
        "                            disapproveValue = point.y;\n",
        "                        }\n",
        "                    });\n",
        "                    \n",
        "                    const difference = approveValue - disapproveValue;\n",
        "                    const differenceText = difference > 0 ?\n",
        "                        `Approval +${difference.toFixed(1)}%` :\n",
        "                        `Disapproval +${(-difference).toFixed(1)}%`;\n",
        "                    const differenceColor = difference > 0 ? '#059669' : '#EC4899';\n",
        "                    \n",
        "                    return `\n",
        "                        <div style=\"font-family: sans-serif;\">\n",
        "                            <div style=\"font-size: 0.9em; color: #666; margin-bottom: 8px;\">Year ${this.x}</div>\n",
        "                            <div style=\"margin-bottom: 4px;\">\n",
        "                                <span style=\"color: #059669\">●</span> Approval:\n",
        "                                <b>${approveValue?.toFixed(1)}%</b>\n",
        "                            </div>\n",
        "                            <div style=\"margin-bottom: 8px;\">\n",
        "                                <span style=\"color: #EC4899\">●</span> Disapproval:\n",
        "                                <b>${disapproveValue?.toFixed(1)}%</b>\n",
        "                            </div>\n",
        "                            <div style=\"padding-top: 8px; border-top: 1px solid #eee;\">\n",
        "                                <span style=\"color: ${differenceColor}; font-weight: 500\">\n",
        "                                    ${differenceText}\n",
        "                                </span>\n",
        "                            </div>\n",
        "                        </div>\n",
        "                    `;\n",
        "                }\n",
        "            },\n",
        "            series: [{\n",
        "                name: 'Approval',\n",
        "                type: 'spline',\n",
        "                data: president.approval,\n",
        "                color: '#059669',\n",
        "                lineWidth: 2,\n",
        "                zIndex: 2,\n",
        "                marker: {\n",
        "                    enabled: false,\n",
        "                    radius: 3\n",
        "                }\n",
        "            }, {\n",
        "                name: 'Disapproval',\n",
        "                type: 'spline',\n",
        "                data: president.disapproval,\n",
        "                color: '#EC4899',\n",
        "                lineWidth: 2,\n",
        "                zIndex: 2,\n",
        "                marker: {\n",
        "                    enabled: false,\n",
        "                    radius: 3\n",
        "                }\n",
        "            }, {\n",
        "                type: 'areasplinerange',\n",
        "                name: 'Range',\n",
        "                data: president.range,\n",
        "                color: '#6B7280',\n",
        "                fillOpacity: 0.1,\n",
        "                lineWidth: 0,\n",
        "                showInLegend: false,\n",
        "                enableMouseTracking: false,\n",
        "                zIndex: 1\n",
        "            }],\n",
        "            credits: {\n",
        "                enabled: false\n",
        "            }\n",
        "        });\n",
        "    });\n",
        "});\n",
        "</script>\n",
        "\n",
        "<style>\n",
        "#export-button:hover {\n",
        "    background-color: #45a049;\n",
        "}\n",
        "</style>\n",
        "```"
      ],
      "id": "6b117f04"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}