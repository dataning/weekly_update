{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: How unpopular is Joe Biden?\n",
        "date: last-modified\n",
        "author: Your Name Here\n",
        "format: \n",
        "  html:\n",
        "    echo: false\n",
        "    embed-resources: true # Ensures all resources are embedded in the HTML\n",
        "    include-in-header:    # Loads required JavaScript libraries for Highcharts\n",
        "        - text: |\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/highcharts.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/highcharts-more.js\"></script>\n",
        "            <script src=\"https://code.highcharts.com/modules/grid-axis.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/exporting.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/offline-exporting.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/export-data.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/accessibility.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.8.1/prop-types.min.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/recharts/2.10.3/Recharts.min.js\"></script>\n",
        "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n",
        "execute:\n",
        "    allow: true          # Enables Python code execution\n",
        "---"
      ],
      "id": "12b8135f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: asis\n",
        "\n",
        "import polars as pl\n",
        "import json\n",
        "\n",
        "def process_data(df):\n",
        "\n",
        "    # Convert date strings to timestamps\n",
        "    # Note: Polars handles dates natively and more efficiently\n",
        "    df = df.with_columns(\n",
        "        pl.col('Date').str.strptime(pl.Date, format='%Y-%m').alias('date')\n",
        "    ).with_columns(\n",
        "        (pl.col('date').cast(pl.Int64) * 1_000).alias('timestamp')\n",
        "    )\n",
        "    \n",
        "    # Create separate dataframes for each type and convert to lists\n",
        "    def get_type_data(type_name):\n",
        "        return (df\n",
        "                .filter(pl.col('Type') == type_name)\n",
        "                .select(['timestamp', 'Value'])\n",
        "                .rows())\n",
        "    \n",
        "    chart_data = {\n",
        "        'approve': sorted(get_type_data('approve')),\n",
        "        'disapprove': sorted(get_type_data('disapprove')),\n",
        "        'approveVariance': sorted(get_type_data('approve_var')),\n",
        "        'disapproveVariance': sorted(get_type_data('disapprove_var'))\n",
        "    }\n",
        "    \n",
        "    return chart_data\n",
        "\n",
        "# Read the CSV file\n",
        "df = pl.read_csv('approval_data.csv')\n",
        "\n",
        "# Process and convert to JSON\n",
        "chart_data = process_data(df)\n",
        "\n",
        "# Convert the data to JSON format for use in JavaScript\n",
        "chart_data_json = json.dumps(chart_data)\n",
        "\n",
        "# Insert the data into the JavaScript environment\n",
        "print(f\"<script>const chartData = {chart_data_json};</script>\")"
      ],
      "id": "e04df7f4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## First chapter\n",
        "\n",
        "\n",
        "```{=html}\n",
        "<!-- Styling Section -->\n",
        "<!-- Modify these styles to change the chart's container appearance -->\n",
        "<style>\n",
        "    .card {\n",
        "        background: white;\n",
        "        border-radius: 12px;\n",
        "        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n",
        "        width: 95%;        /* Controls the width relative to the container */\n",
        "        margin: 0 auto;    /* Centers the card horizontally */\n",
        "        padding: 24px;     /* Creates space around the chart */\n",
        "    }\n",
        "    #chart {\n",
        "        width: 100%;       /* Makes the chart fill its container */\n",
        "        min-height: 600px; /* Sets a minimum height for the chart */\n",
        "        margin: 0 auto;\n",
        "    }\n",
        "</style>\n",
        "\n",
        "<!-- Chart Container -->\n",
        "<div class=\"card\">\n",
        "    <div id=\"chart\"></div>\n",
        "</div>\n",
        "\n",
        "<!-- -------------------------------------------------------------------------- -->\n",
        "<!--                            Chart Implementation                            -->\n",
        "<!-- -------------------------------------------------------------------------- -->\n",
        "\n",
        "<script>\n",
        "// Wait for the document to load before creating the chart\n",
        "document.addEventListener('DOMContentLoaded', function() {\n",
        "\n",
        "    // Highcharts Configuration\n",
        "    // This section controls all aspects of the chart's appearance and behavior\n",
        "    Highcharts.chart('chart', {\n",
        "\n",
        "        // Basic chart settings\n",
        "        // ========================================================================\n",
        "        // Modify these to change the overall chart appearance\n",
        "        chart: {\n",
        "            type: 'line',\n",
        "            animation: { duration: 1500 },\n",
        "            spacing: [30, 50, 30, 50], // [top, right, bottom, left]\n",
        "            marginTop: 60,\n",
        "            marginBottom: 150,\n",
        "            width: null,    // null allows responsive sizing\n",
        "            height: 600     // fixed height in pixels\n",
        "        },\n",
        "        \n",
        "        // Title settings\n",
        "        // Modify text, color, and positioning here\n",
        "        title: {\n",
        "            useHTML: true,\n",
        "            text: 'How <span style=\"color: #008000\">unpopular</span> is Joe Biden?',\n",
        "            align: 'center',\n",
        "            margin: 0,\n",
        "            y: -10,\n",
        "            style: {\n",
        "                fontSize: '20px',\n",
        "                fontWeight: '600',\n",
        "                color: '#000000' \n",
        "            }\n",
        "        },\n",
        "\n",
        "        // Subtitle settings\n",
        "        subtitle: {\n",
        "            text: '95% OF POLLS PROJECTED TO FALL IN THIS RANGE',\n",
        "            align: 'center',\n",
        "            y: 15,\n",
        "            style: {\n",
        "                color: '#666666',\n",
        "                fontSize: '14px'\n",
        "            }\n",
        "        },\n",
        "\n",
        "        // Export menu settings\n",
        "        // Customize the export options and appearance\n",
        "        exporting: {\n",
        "            enabled: true,\n",
        "            fallbackToExportServer: false,\n",
        "            sourceWidth: 1200,\n",
        "            sourceHeight: 800,\n",
        "            scale: 2,\n",
        "            chartOptions: {\n",
        "                chart: {\n",
        "                    spacing: [50, 50, 50, 50],\n",
        "                    marginTop: 80,\n",
        "                    marginBottom: 170,\n",
        "                    backgroundColor: '#ffffff'\n",
        "                },\n",
        "                xAxis: { labels: { y: 30 } },\n",
        "                title: {\n",
        "                    margin: 60,\n",
        "                    style: { fontSize: '24px' }\n",
        "                },\n",
        "                subtitle: {\n",
        "                    style: { fontSize: '16px' }\n",
        "                },\n",
        "                legend: {\n",
        "                    y: 10,\n",
        "                    margin: 50\n",
        "                }\n",
        "            },\n",
        "            buttons: {\n",
        "                contextButton: {\n",
        "                    menuItems: ['downloadPNG', 'downloadJPEG', 'downloadPDF', 'downloadSVG', \n",
        "                            'separator', 'downloadCSV', 'downloadXLS']\n",
        "                }\n",
        "            }\n",
        "        },\n",
        "\n",
        "        // Legend settings\n",
        "        // Modify position, symbols, and spacing\n",
        "        legend: {\n",
        "            align: 'center',\n",
        "            verticalAlign: 'bottom',\n",
        "            layout: 'horizontal',\n",
        "            itemStyle: {\n",
        "                color: '#666',\n",
        "                fontWeight: '500',\n",
        "                fontFamily: 'Inter, sans-serif'\n",
        "            },\n",
        "            symbolWidth: 24,\n",
        "            symbolHeight: 2,\n",
        "            symbolRadius: 0,\n",
        "            y: 20,\n",
        "            padding: 12,\n",
        "            itemMarginTop: 10,\n",
        "            margin: 50\n",
        "        },\n",
        "\n",
        "        // X-axis settings\n",
        "        // Customize date display and grid lines\n",
        "        xAxis: {\n",
        "            type: 'datetime',\n",
        "            labels: {\n",
        "                format: '{value:%b %Y}',\n",
        "                rotation: -45,\n",
        "                y: 30,\n",
        "                style: {\n",
        "                    fontFamily: 'JetBrains Mono, monospace',\n",
        "                    fontSize: '12px',\n",
        "                    color: '#666'\n",
        "                }\n",
        "            },\n",
        "            tickmarkPlacement: 'on',\n",
        "            gridLineWidth: 1,\n",
        "            // gridLineColor: 'rgba(0,0,0,0.05)',\n",
        "            gridLineDashStyle: 'dot',\n",
        "            gridLineColor: '#b7b8bc'  // Light gray color\n",
        "        },\n",
        "\n",
        "        // Y-axis settings\n",
        "        // Modify range, labels, and title\n",
        "        yAxis: {\n",
        "            title: {\n",
        "                text: 'Approval Rating (%)',\n",
        "                align: 'high',\n",
        "                rotation: 270,\n",
        "                y: 200,\n",
        "                x: 0,\n",
        "                style: {\n",
        "                    color: '#666666',\n",
        "                    fontSize: '14px',\n",
        "                    fontFamily: 'Inter, sans-serif'\n",
        "                }\n",
        "            },\n",
        "            labels: {\n",
        "                format: '{value}%',\n",
        "                style: {\n",
        "                    fontFamily: 'JetBrains Mono, monospace',\n",
        "                    fontSize: '12px',\n",
        "                    color: '#666'\n",
        "                }\n",
        "            },\n",
        "            min: 20,\n",
        "            max: 80,\n",
        "            gridLineWidth: 1,\n",
        "            // gridLineColor: 'rgba(0,0,0,0.05)',\n",
        "            gridLineDashStyle: 'dot',\n",
        "            gridLineColor: '#b7b8bc'  // Light gray color\n",
        "        },\n",
        "\n",
        "        // Tooltip configuration\n",
        "        // Customize the hover information display\n",
        "        tooltip: {\n",
        "            shared: true,\n",
        "            crosshairs: true,\n",
        "            useHTML: true,\n",
        "            formatter: function() {\n",
        "                const date = Highcharts.dateFormat('%B %Y', this.x);\n",
        "                let approveValue, disapproveValue;\n",
        "                \n",
        "                this.points.forEach(point => {\n",
        "                    if (point.series.name === 'Approve') {\n",
        "                        approveValue = point.y;\n",
        "                    } else if (point.series.name === 'Disapprove') {\n",
        "                        disapproveValue = point.y;\n",
        "                    }\n",
        "                });\n",
        "\n",
        "                const difference = approveValue - disapproveValue;\n",
        "                const differenceText = difference > 0 ? \n",
        "                    `Approve +${difference.toFixed(1)}%` : \n",
        "                    `Disapprove ${(-difference).toFixed(1)}%`;\n",
        "                const differenceColor = difference > 0 ? '#059669' : '#EC4899';\n",
        "\n",
        "                return `\n",
        "                    <div style=\"font-family: 'Inter', sans-serif;\">\n",
        "                        <div style=\"font-size: 0.9em; color: #666; margin-bottom: 8px;\">${date}</div>\n",
        "                        <div style=\"font-family: 'JetBrains Mono', monospace; margin-bottom: 4px;\">\n",
        "                            <span style=\"color: #059669\">●</span> Approve: \n",
        "                            <b>${approveValue?.toFixed(1)}%</b>\n",
        "                        </div>\n",
        "                        <div style=\"font-family: 'JetBrains Mono', monospace; margin-bottom: 8px;\">\n",
        "                            <span style=\"color: #EC4899\">●</span> Disapprove: \n",
        "                            <b>${disapproveValue?.toFixed(1)}%</b>\n",
        "                        </div>\n",
        "                        <div style=\"padding-top: 8px; border-top: 1px solid #eee; font-family: 'JetBrains Mono', monospace;\">\n",
        "                            <span style=\"color: ${differenceColor}; font-weight: 500\">\n",
        "                                ${differenceText}\n",
        "                            </span>\n",
        "                        </div>\n",
        "                    </div>\n",
        "                `;\n",
        "            }\n",
        "        },\n",
        "        plotOptions: {\n",
        "            series: {\n",
        "                animation: { duration: 1500 }\n",
        "            },\n",
        "            line: {\n",
        "                marker: {\n",
        "                    enabled: false,\n",
        "                    states: {\n",
        "                        hover: {\n",
        "                            enabled: true,\n",
        "                            radius: 5\n",
        "                        }\n",
        "                    }\n",
        "                },\n",
        "                states: {\n",
        "                    hover: { lineWidth: 3 }\n",
        "                }\n",
        "            }\n",
        "        },\n",
        "\n",
        "        // Series configuration\n",
        "        // Define the data series and their appearance\n",
        "        series: [{\n",
        "            name: 'Approve',\n",
        "            data: chartData.approve,\n",
        "            color: '#059669',\n",
        "            zIndex: 2,\n",
        "            lineWidth: 2\n",
        "        }, {\n",
        "            name: 'Disapprove',\n",
        "            data: chartData.disapprove,\n",
        "            color: '#EC4899',\n",
        "            zIndex: 2,\n",
        "            lineWidth: 2\n",
        "        }, {\n",
        "            name: 'Approve Variance',\n",
        "            type: 'scatter',\n",
        "            data: chartData.approveVariance,\n",
        "            color: '#059669',\n",
        "            opacity: 0.15,\n",
        "            enableMouseTracking: false,\n",
        "            showInLegend: false,\n",
        "            zIndex: 1\n",
        "        }, {\n",
        "            name: 'Disapprove Variance',\n",
        "            type: 'scatter',\n",
        "            data: chartData.disapproveVariance,\n",
        "            color: '#EC4899',\n",
        "            opacity: 0.15,\n",
        "            enableMouseTracking: false,\n",
        "            showInLegend: false,\n",
        "            zIndex: 1\n",
        "        }],\n",
        "        credits: {\n",
        "            enabled: false\n",
        "        }\n",
        "    });\n",
        "});\n",
        "</script>\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Second chapter\n"
      ],
      "id": "241c67bc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: asis\n",
        "\n",
        "import polars as pl\n",
        "import json\n",
        "\n",
        "def process_presidential_data(df):\n",
        "    # Get unique presidents\n",
        "    unique_presidents = df.select('president').unique().to_series().to_list()\n",
        "    presidents_data = []\n",
        "    \n",
        "    for president in unique_presidents:\n",
        "        # Filter data for current president\n",
        "        president_df = df.filter(pl.col('president') == president)\n",
        "        \n",
        "        # Get the first row's years value for this president\n",
        "        years = president_df.select('years').row(0)[0]\n",
        "        \n",
        "        # Get values in order of year_in_term\n",
        "        sorted_df = president_df.sort('year_in_term')\n",
        "        approval_values = sorted_df.select('approval').to_series().to_list()\n",
        "        disapproval_values = sorted_df.select('disapproval').to_series().to_list()\n",
        "        change_status_values = sorted_df.select('change_status').to_series().to_list()\n",
        "        \n",
        "        # Create range data for the area between lines\n",
        "        range_data = [[apr, dis] for apr, dis in zip(approval_values, disapproval_values)]\n",
        "        \n",
        "        # Create clean ID from president name\n",
        "        clean_id = president.lower().replace(' ', '').replace('.', '')\n",
        "        \n",
        "        president_data = {\n",
        "            'id': clean_id,\n",
        "            'name': president,\n",
        "            'years': years,\n",
        "            'approval': approval_values,\n",
        "            'disapproval': disapproval_values,\n",
        "            'range': range_data,\n",
        "            'change_status': change_status_values\n",
        "        }\n",
        "        presidents_data.append(president_data)\n",
        "    \n",
        "    return presidents_data\n",
        "\n",
        "# Read and process the data\n",
        "df = pl.read_csv('presidential_approval.csv')\n",
        "\n",
        "df_with_diff = df.with_columns([\n",
        "    pl.struct(['approval', 'disapproval'])\n",
        "    .map_elements(\n",
        "        lambda x: \n",
        "            f\"Approval +{x['approval'] - x['disapproval']}%\" \n",
        "            if x['approval'] > x['disapproval']\n",
        "            else f\"Disapproval +{x['disapproval'] - x['approval']}%\",\n",
        "        return_dtype=pl.Utf8  # Specify return type as string\n",
        "    ).alias('change_status')\n",
        "])\n",
        "\n",
        "df_with_diff = df_with_diff.sort(['president', 'year_in_term'])\n",
        "\n",
        "chart_data = process_presidential_data(df_with_diff)\n",
        "\n",
        "# Convert to JSON and output as JavaScript\n",
        "print(\"<script>\")\n",
        "print(f\"const multi_chartData = {json.dumps(chart_data)};\")\n",
        "print(\"</script>\")"
      ],
      "id": "8e6f7379",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{=html}\n",
        "<div style=\"padding: 20px;\">\n",
        "    <div id=\"export-container\" style=\"background-color: white;\">\n",
        "        <!-- Title section -->\n",
        "        <div style=\"text-align: center; padding: 20px 0 30px 0;\">\n",
        "            <h1 style=\"margin: 0; font-size: 2em; color: #333;\">Presidential Approval Ratings</h1>\n",
        "            <p style=\"margin: 10px 0 0 0; font-size: 1.1em; color: #666;\">Tracking Presidential Performance Through the Years</p>\n",
        "        </div>\n",
        "        \n",
        "        <!-- Charts grid -->\n",
        "        <div id=\"chartsContainer\" style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;\">\n",
        "            <div id=\"donaldtrump\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"barackobama\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"georgewbush\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"billclinton\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"georgehwbush\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"ronaldreagan\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"jimmycarter\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"geraldford\" style=\"min-width: 300px;\"></div>\n",
        "            <div id=\"richardnixon\" style=\"min-width: 300px;\"></div>\n",
        "        </div>\n",
        "    </div>\n",
        "    \n",
        "    <!-- Button container -->\n",
        "    <div style=\"text-align: center; padding: 20px;\">\n",
        "        <button onclick=\"exportCharts()\" id=\"export-button\" style=\"padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n",
        "            Export as PNG\n",
        "        </button>\n",
        "    </div>\n",
        "</div>\n",
        "\n",
        "<script>\n",
        "// Add event listener to the export button\n",
        "document.getElementById('export-button').addEventListener('click', exportCharts);\n",
        "\n",
        "function exportCharts() {\n",
        "    const container = document.getElementById('export-container');\n",
        "    \n",
        "    html2canvas(container, {\n",
        "        backgroundColor: 'white',\n",
        "        scale: 2, // Increase quality\n",
        "        logging: true,\n",
        "        onclone: function(clonedDoc) {\n",
        "            // Any modifications to the cloned document before capture\n",
        "        }\n",
        "    }).then(canvas => {\n",
        "        // Convert canvas to PNG and trigger download\n",
        "        const link = document.createElement('a');\n",
        "        link.download = 'presidential_approval_charts.png';\n",
        "        link.href = canvas.toDataURL('image/png');\n",
        "        link.click();\n",
        "    });\n",
        "}\n",
        "\n",
        "// Store all chart instances\n",
        "const charts = [];\n",
        "\n",
        "// Synchronize hovering across charts\n",
        "function syncHover(e) {\n",
        "    const event = {\n",
        "        xAxis: [{\n",
        "            value: e.target.x,\n",
        "            axis: e.target.series.xAxis\n",
        "        }],\n",
        "        chartX: e.target.series.chart.xAxis[0].toPixels(e.target.x),\n",
        "        chartY: e.target.series.chart.yAxis[0].toPixels(e.target.y)\n",
        "    };\n",
        "\n",
        "    charts.forEach(function(chart) {\n",
        "        chart.tooltip.refresh([\n",
        "            chart.series[0].points[e.target.x],\n",
        "            chart.series[1].points[e.target.x]\n",
        "        ]);\n",
        "    });\n",
        "}\n",
        "\n",
        "// Handle mouseout with complete reset\n",
        "function syncMouseOut(e) {\n",
        "    charts.forEach(function(chart) {\n",
        "        chart.tooltip.hide();\n",
        "        chart.series.forEach(series => {\n",
        "            series.points.forEach(point => {\n",
        "                point.setState('');\n",
        "            });\n",
        "        });\n",
        "    });\n",
        "}\n",
        "\n",
        "// Create charts\n",
        "document.addEventListener('DOMContentLoaded', function() {\n",
        "    multi_chartData.forEach(president => {        \n",
        "        const chart = Highcharts.chart(president.id, {\n",
        "            exporting: { enabled: false },\n",
        "            title: {\n",
        "                text: `${president.name}<br><span style=\"font-size: 12px; color: #666;\">${president.years}</span>`,\n",
        "                useHTML: true\n",
        "            },\n",
        "            yAxis: {\n",
        "                title: { text: 'Rating (%)' },\n",
        "                min: 20,\n",
        "                max: 80,\n",
        "                gridLineWidth: 1\n",
        "            },\n",
        "            xAxis: {\n",
        "                title: { text: 'Years' },\n",
        "                categories: ['0', '1', '2', '3', '4'],\n",
        "                gridLineWidth: 1\n",
        "            },\n",
        "            legend: {\n",
        "                align: 'center',\n",
        "                verticalAlign: 'bottom'\n",
        "            },\n",
        "            plotOptions: {\n",
        "                series: {\n",
        "                    stickyTracking: false,\n",
        "                    marker: {\n",
        "                        enabled: false,\n",
        "                        radius: 3\n",
        "                    },\n",
        "                    point: {\n",
        "                        events: {\n",
        "                            mouseOver: syncHover,\n",
        "                            mouseOut: syncMouseOut\n",
        "                        }\n",
        "                    },\n",
        "                    states: {\n",
        "                        inactive: {\n",
        "                            opacity: 1 // Keep full opacity when other series are hovered\n",
        "                        }\n",
        "                    }\n",
        "                },\n",
        "                spline: {\n",
        "                    tension: 0.4,\n",
        "                    step: false\n",
        "                },\n",
        "                areasplinerange: {\n",
        "                    fillOpacity: 0.1,\n",
        "                    lineWidth: 0,\n",
        "                    marker: {\n",
        "                        enabled: false\n",
        "                    },\n",
        "                    enableMouseTracking: false,\n",
        "                    states: {\n",
        "                        hover: {\n",
        "                            enabled: false\n",
        "                        },\n",
        "                        inactive: {\n",
        "                            opacity: 1 // Keep the area visible even when inactive\n",
        "                        }\n",
        "                    }\n",
        "                }\n",
        "            },\n",
        "            tooltip: {\n",
        "                shared: true,\n",
        "                crosshairs: true,\n",
        "                useHTML: true,\n",
        "                formatter: function() {\n",
        "                    let approveValue, disapproveValue;\n",
        "                    this.points.forEach(point => {\n",
        "                        if (point.series.name === 'Approval') {\n",
        "                            approveValue = point.y;\n",
        "                        } else if (point.series.name === 'Disapproval') {\n",
        "                            disapproveValue = point.y;\n",
        "                        }\n",
        "                    });\n",
        "                    \n",
        "                    const difference = approveValue - disapproveValue;\n",
        "                    const differenceText = difference > 0 ?\n",
        "                        `Approval +${difference.toFixed(1)}%` :\n",
        "                        `Disapproval +${(-difference).toFixed(1)}%`;\n",
        "                    const differenceColor = difference > 0 ? '#059669' : '#EC4899';\n",
        "                    \n",
        "                    return `\n",
        "                        <div style=\"font-family: sans-serif;\">\n",
        "                            <div style=\"font-size: 0.9em; color: #666; margin-bottom: 8px;\">Year ${this.x}</div>\n",
        "                            <div style=\"margin-bottom: 4px;\">\n",
        "                                <span style=\"color: #059669\">●</span> Approval:\n",
        "                                <b>${approveValue?.toFixed(1)}%</b>\n",
        "                            </div>\n",
        "                            <div style=\"margin-bottom: 8px;\">\n",
        "                                <span style=\"color: #EC4899\">●</span> Disapproval:\n",
        "                                <b>${disapproveValue?.toFixed(1)}%</b>\n",
        "                            </div>\n",
        "                            <div style=\"padding-top: 8px; border-top: 1px solid #eee;\">\n",
        "                                <span style=\"color: ${differenceColor}; font-weight: 500\">\n",
        "                                    ${differenceText}\n",
        "                                </span>\n",
        "                            </div>\n",
        "                        </div>\n",
        "                    `;\n",
        "                }\n",
        "            },\n",
        "            series: [{\n",
        "                name: 'Approval',\n",
        "                type: 'spline',\n",
        "                data: president.approval,\n",
        "                color: '#059669',\n",
        "                lineWidth: 2,\n",
        "                zIndex: 2\n",
        "            }, {\n",
        "                name: 'Disapproval',\n",
        "                type: 'spline',\n",
        "                data: president.disapproval,\n",
        "                color: '#EC4899',\n",
        "                lineWidth: 2,\n",
        "                zIndex: 2\n",
        "            }, {\n",
        "                name: 'Range',\n",
        "                type: 'areasplinerange',\n",
        "                data: president.range,\n",
        "                color: '#6B7280',\n",
        "                fillOpacity: 0.1,\n",
        "                lineWidth: 0,\n",
        "                showInLegend: false,\n",
        "                enableMouseTracking: false,\n",
        "                zIndex: 1\n",
        "            }],\n",
        "            credits: {\n",
        "                enabled: false\n",
        "            }\n",
        "        });\n",
        "        \n",
        "        charts.push(chart);\n",
        "    });\n",
        "});\n",
        "</script>\n",
        "\n",
        "<style>\n",
        "#export-button:hover {\n",
        "    background-color: #45a049;\n",
        "}\n",
        "</style>\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Third chapter\n"
      ],
      "id": "f08d46f6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: asis\n",
        "import polars as pl\n",
        "import json\n",
        "\n",
        "# Read the CSV file\n",
        "df = pl.read_csv('presidential_approval.csv')\n",
        "\n",
        "# Create a list to store the processed data\n",
        "presidents_data = []\n",
        "\n",
        "# Get unique presidents\n",
        "unique_presidents = df.get_column('president').unique().to_list()\n",
        "\n",
        "for president in unique_presidents:\n",
        "    president_df = df.filter(pl.col('president') == president)\n",
        "    years = president_df.get_column('years')[0]\n",
        "    \n",
        "    data_points = []\n",
        "    for row in president_df.iter_rows(named=True):\n",
        "        data_points.append({\n",
        "            'month': int(row['year_in_term'] * 12),\n",
        "            'approval': row['approval'],\n",
        "            'disapproval': row['disapproval']\n",
        "        })\n",
        "    \n",
        "    president_obj = {\n",
        "        'name': president,\n",
        "        'years': years,\n",
        "        'data': data_points\n",
        "    }\n",
        "    \n",
        "    presidents_data.append(president_obj)\n",
        "\n",
        "print(f\"<script>const presidentsData = {json.dumps(presidents_data)};</script>\")"
      ],
      "id": "e4698b69",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{=html}\n",
        "<div class=\"visualization-container\" style=\"position: relative; max-width: 1200px; margin: 0 auto; background-color: white;\">\n",
        "    <!-- Content to be exported -->\n",
        "    <div class=\"export-content\" style=\"background-color: white;\">\n",
        "        <div style=\"text-align: center; padding: 20px 0 30px 0;\">\n",
        "            <h1 style=\"margin: 0; font-size: 2em; color: #333;\">Presidential Approval Ratings</h1>\n",
        "            <p style=\"margin: 10px 0 0 0; font-size: 1.1em; color: #666;\">Tracking Presidential Performance Through the Years</p>\n",
        "        </div>\n",
        "        <div id=\"presidential-approval\"></div>\n",
        "    </div>\n",
        "    \n",
        "    <!-- Button container -->\n",
        "    <div style=\"text-align: center; padding: 20px;\">\n",
        "        <button id=\"export-button\" style=\"padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n",
        "            Export as PNG\n",
        "        </button>\n",
        "    </div>\n",
        "</div>\n",
        "\n",
        "<script>\n",
        "const { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip, Legend } = Recharts;\n",
        "\n",
        "const CustomTooltip = ({ active, payload, label }) => {\n",
        "  if (active && payload && payload.length) {\n",
        "    return React.createElement('div', {\n",
        "      style: {\n",
        "        backgroundColor: 'white',\n",
        "        padding: '8px',\n",
        "        border: '1px solid #ccc',\n",
        "        borderRadius: '4px'\n",
        "      }\n",
        "    }, [\n",
        "      React.createElement('p', { key: 'year', style: { fontWeight: 'bold' } }, `Year ${label/12}`),\n",
        "      React.createElement('p', { key: 'approval' }, `Approval: ${payload[0].value}%`),\n",
        "      React.createElement('p', { key: 'disapproval', style: { color: '#4CAF50' } }, `Disapproval: ${payload[1].value}%`)\n",
        "    ]);\n",
        "  }\n",
        "  return null;\n",
        "};\n",
        "\n",
        "const App = () => {\n",
        "  return React.createElement('div', {\n",
        "    style: {\n",
        "      display: 'grid',\n",
        "      gridTemplateColumns: 'repeat(3, 1fr)',\n",
        "      gap: '1.5rem',\n",
        "      padding: '1rem',\n",
        "      width: '100%',\n",
        "      backgroundColor: 'white'\n",
        "    }\n",
        "  }, presidentsData.map(president => \n",
        "    React.createElement('div', {\n",
        "      key: president.name,\n",
        "      style: {\n",
        "        border: '1px solid #ccc',\n",
        "        borderRadius: '8px',\n",
        "        padding: '1rem',\n",
        "        backgroundColor: 'white'\n",
        "      }\n",
        "    }, [\n",
        "      React.createElement('div', {\n",
        "        key: 'header',\n",
        "        style: { \n",
        "          fontSize: '1.125rem',\n",
        "          fontWeight: '600',\n",
        "          marginBottom: '0.25rem'\n",
        "        }\n",
        "      }, [\n",
        "        president.name,\n",
        "        React.createElement('span', {\n",
        "          key: 'years',\n",
        "          style: {\n",
        "            color: '#666',\n",
        "            fontSize: '0.875rem',\n",
        "            marginLeft: '0.5rem'\n",
        "          }\n",
        "        }, president.years)\n",
        "      ]),\n",
        "      React.createElement('div', {\n",
        "        key: 'chart',\n",
        "        style: { height: '240px' }\n",
        "      }, React.createElement(ResponsiveContainer, { width: '100%', height: '100%' },\n",
        "        React.createElement(LineChart, {\n",
        "          data: president.data,\n",
        "          margin: { top: 5, right: 30, bottom: 10, left: 5 }\n",
        "        }, [\n",
        "          React.createElement(CartesianGrid, { key: 'grid', strokeDasharray: '3 3' }),\n",
        "          React.createElement(XAxis, {\n",
        "            key: 'xaxis',\n",
        "            dataKey: 'month',\n",
        "            type: 'number',\n",
        "            domain: [0, 48],\n",
        "            ticks: [0, 12, 24, 36, 48],\n",
        "            label: { value: 'Years', position: 'bottom' }\n",
        "          }),\n",
        "          React.createElement(YAxis, {\n",
        "            key: 'yaxis',\n",
        "            domain: [20, 80],\n",
        "            ticks: [20, 50, 80]\n",
        "          }),\n",
        "          React.createElement(Tooltip, {\n",
        "            key: 'tooltip',\n",
        "            content: CustomTooltip\n",
        "          }),\n",
        "          React.createElement(Legend, {\n",
        "            key: 'legend',\n",
        "            verticalAlign: 'bottom',\n",
        "            align: 'center',\n",
        "            wrapperStyle: { paddingTop: '30px' },\n",
        "            iconType: 'circle'\n",
        "          }),\n",
        "          React.createElement(Line, {\n",
        "            key: 'approval',\n",
        "            type: 'monotone',\n",
        "            dataKey: 'approval',\n",
        "            name: 'Approval',\n",
        "            stroke: '#000000',\n",
        "            dot: false,\n",
        "            strokeWidth: 2,\n",
        "            activeDot: { r: 4 }\n",
        "          }),\n",
        "          React.createElement(Line, {\n",
        "            key: 'disapproval',\n",
        "            type: 'monotone',\n",
        "            dataKey: 'disapproval',\n",
        "            name: 'Disapproval',\n",
        "            stroke: '#4CAF50',\n",
        "            dot: false,\n",
        "            strokeWidth: 2,\n",
        "            activeDot: { r: 4 }\n",
        "          })\n",
        "        ])\n",
        "      ))\n",
        "    ])\n",
        "  ));\n",
        "};\n",
        "\n",
        "// Render the app\n",
        "const container = document.getElementById('presidential-approval');\n",
        "const root = ReactDOM.createRoot(container);\n",
        "root.render(React.createElement(App));\n",
        "\n",
        "// Add export functionality\n",
        "document.getElementById('export-button').addEventListener('click', async () => {\n",
        "    try {\n",
        "        await new Promise(resolve => setTimeout(resolve, 500));\n",
        "        const element = document.querySelector('.export-content');\n",
        "        if (!element) {\n",
        "            throw new Error('Could not find the visualization container');\n",
        "        }\n",
        "        \n",
        "        const canvas = await html2canvas(element, {\n",
        "            backgroundColor: 'white',\n",
        "            scale: 2,\n",
        "            logging: true,\n",
        "            width: element.offsetWidth,\n",
        "            height: element.offsetHeight,\n",
        "            useCORS: true\n",
        "        });\n",
        "        \n",
        "        const link = document.createElement('a');\n",
        "        link.download = 'presidential_approval_ratings.png';\n",
        "        link.href = canvas.toDataURL('image/png');\n",
        "        link.click();\n",
        "    } catch (error) {\n",
        "        console.error('Error during export:', error);\n",
        "        alert('There was an error exporting the chart. Please check the console for details.');\n",
        "    }\n",
        "});\n",
        "</script>\n",
        "\n",
        "<style>\n",
        "#presidential-approval {\n",
        "  width: 100%;\n",
        "  margin: 0 auto;\n",
        "}\n",
        "\n",
        "#export-button:hover {\n",
        "  background-color: #45a049;\n",
        "}\n",
        "\n",
        ".visualization-container {\n",
        "  background-color: white;\n",
        "}\n",
        "</style>\n",
        "```"
      ],
      "id": "4dbf0f1a"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}