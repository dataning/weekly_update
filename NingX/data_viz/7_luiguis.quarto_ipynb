{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Luigi Mangione Extradition Probability\"\n",
        "date: last-modified\n",
        "author: Your Name Here\n",
        "format:\n",
        "  html:\n",
        "    echo: false\n",
        "    embed-resources: true\n",
        "    include-in-header:\n",
        "      - text: |\n",
        "          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/highcharts.js\"></script>\n",
        "          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/exporting.js\"></script>\n",
        "          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/export-data.js\"></script>\n",
        "          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.2.0/modules/accessibility.js\"></script>\n",
        "execute:\n",
        "  allow: true\n",
        "---"
      ],
      "id": "4d022fa6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: asis\n",
        "\n",
        "import polars as pl\n",
        "import json\n",
        "from datetime import datetime\n",
        "\n",
        "def process_market_data(df):\n",
        "    series_data = []\n",
        "    \n",
        "    # Get unique end dates\n",
        "    end_dates = df['end_date'].unique().to_list()\n",
        "    \n",
        "    for end_date in end_dates:\n",
        "        df_market = df.filter(pl.col('end_date') == end_date)\n",
        "        \n",
        "        # Convert timestamp to milliseconds and prepare trading data\n",
        "        trading_data = (\n",
        "            df_market.select([\n",
        "                (pl.col('full_timestamp').dt.timestamp().mul(1000)).alias('x'),\n",
        "                pl.col('price').alias('y')\n",
        "            ])\n",
        "            .with_columns([\n",
        "                pl.col('x').cast(pl.Int64),\n",
        "                pl.col('y').cast(pl.Float64)\n",
        "            ])\n",
        "            .to_numpy()\n",
        "            .tolist()\n",
        "        )\n",
        "        \n",
        "        # Instead of just min and max timestamps, use all timestamps\n",
        "        # but with the same yes_quote value for each timestamp\n",
        "        yes_quote = float(df_market['yes_quote'][0])\n",
        "        yes_quote_data = [\n",
        "            [x, yes_quote] for x, _ in trading_data\n",
        "        ]\n",
        "        \n",
        "        # Format end date for display\n",
        "        display_date = end_date.strftime(\"%Y-%m-%d\") if isinstance(end_date, datetime) else str(end_date)\n",
        "        \n",
        "        # Add data series\n",
        "        series_data.extend([\n",
        "            {\n",
        "                'name': f'Trading Price (End: {display_date})',\n",
        "                'data': trading_data\n",
        "            },\n",
        "            {\n",
        "                'name': f'Current Yes Quote ({display_date})',\n",
        "                'data': yes_quote_data\n",
        "            }\n",
        "        ])\n",
        "    \n",
        "    return series_data\n",
        "\n",
        "# Process data\n",
        "df = pl.read_parquet('luigi-mangione-extradited-to-new-york-in_2024-12-15.parquet')\n",
        "chart_data = process_market_data(df)\n",
        "\n",
        "# Output as JavaScript\n",
        "print(f\"<script>const chartData = {json.dumps(chart_data)};</script>\")"
      ],
      "id": "cab49f52",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{=html}\n",
        "<div class=\"chart-container\">\n",
        "    <div id=\"chart\"></div>\n",
        "</div>\n",
        "\n",
        "<style>\n",
        ".chart-container {\n",
        "    background: white;\n",
        "    width: 100%;  /* Full width */\n",
        "    margin: 20px auto;\n",
        "    padding: 20px;\n",
        "}\n",
        "#chart {\n",
        "    width: 100%;\n",
        "    height: 600px;\n",
        "    min-width: 800px;  /* Minimum width */\n",
        "}\n",
        "</style>\n",
        "\n",
        "<script>\n",
        "document.addEventListener('DOMContentLoaded', function() {\n",
        "    // Process the data and add visual styling properties\n",
        "    const processedData = chartData.map(series => {\n",
        "        const isQuoteLine = series.name.includes('Quote');\n",
        "        return {\n",
        "            name: series.name,\n",
        "            data: series.data.map(point => {\n",
        "                let timestamp = Number(point[0].toString());\n",
        "                if (timestamp > 1e16) timestamp = timestamp / 1000000;\n",
        "                else if (timestamp > 1e13) timestamp = timestamp / 1000;\n",
        "                return [timestamp, point[1]];\n",
        "            }),\n",
        "            // Add specific styling for quote lines\n",
        "            opacity: isQuoteLine ? 0.3 : 1,\n",
        "            lineWidth: isQuoteLine ? 1 : 2,\n",
        "            dashStyle: isQuoteLine ? 'Dash' : 'Solid',\n",
        "            enableMouseTracking: true // Keep tooltip functionality\n",
        "        };\n",
        "    });\n",
        "\n",
        "    Highcharts.chart('chart', {\n",
        "        chart: {\n",
        "            type: 'line',\n",
        "            style: {\n",
        "                fontFamily: '-apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif'\n",
        "            }\n",
        "        },\n",
        "        \n",
        "        title: {\n",
        "            text: 'Luigi Mangione Extradition Probability',\n",
        "            align: 'left',\n",
        "            style: {\n",
        "                fontSize: '20px',\n",
        "                fontWeight: 'bold'\n",
        "            }\n",
        "        },\n",
        "\n",
        "        subtitle: {\n",
        "            text: 'Betting market probabilities by expiry date',\n",
        "            align: 'left'\n",
        "        },\n",
        "\n",
        "        xAxis: {\n",
        "            type: 'datetime',\n",
        "            dateTimeLabelFormats: {\n",
        "                millisecond: '%b %e',\n",
        "                second: '%b %e',\n",
        "                minute: '%b %e',\n",
        "                hour: '%b %e',\n",
        "                day: '%b %e',\n",
        "                week: '%b %e',\n",
        "                month: '%b',\n",
        "                year: '%Y'\n",
        "            },\n",
        "            labels: {\n",
        "                rotation: -45,\n",
        "                align: 'right',\n",
        "                style: {\n",
        "                    fontFamily: 'Inter, JetBrains Mono, monospace',\n",
        "                    fontSize: '12px',\n",
        "                    color: '#666'\n",
        "                }\n",
        "            }\n",
        "        },\n",
        "        \n",
        "        yAxis: {\n",
        "            title: { text: null },\n",
        "            min: 0,\n",
        "            max: 1,\n",
        "            tickInterval: 0.2,\n",
        "            labels: { \n",
        "                formatter: function() {\n",
        "                    return Math.round(this.value * 100) + '%';\n",
        "                },\n",
        "                style: {\n",
        "                    color: '#666666',\n",
        "                    fontSize: '14px',\n",
        "                    fontFamily: 'Inter, sans-serif'\n",
        "                }\n",
        "            },\n",
        "            gridLineWidth: 1,\n",
        "            gridLineDashStyle: 'Dot',\n",
        "            gridLineColor: '#E0E0E0'\n",
        "        },\n",
        "        \n",
        "        tooltip: {\n",
        "            shared: true,\n",
        "            useHTML: true,\n",
        "            formatter: function() {\n",
        "                if (!this.points) return false;\n",
        "                \n",
        "                const date = new Date(this.x);\n",
        "                const formattedDate = date.toLocaleDateString('en-GB', {\n",
        "                    year: 'numeric',\n",
        "                    month: 'long',\n",
        "                    day: 'numeric',\n",
        "                    hour: '2-digit',\n",
        "                    minute: '2-digit'\n",
        "                });\n",
        "                \n",
        "                const expiryGroups = {};\n",
        "                \n",
        "                this.points.forEach(point => {\n",
        "                    const seriesName = point.series.name;\n",
        "                    let expiryDate = '';\n",
        "                    \n",
        "                    if (seriesName.includes('End:')) {\n",
        "                        expiryDate = seriesName.split('End: ')[1].replace(')', '');\n",
        "                    } else if (seriesName.includes('Quote')) {\n",
        "                        expiryDate = seriesName.match(/\\((.*?)\\)/)[1];\n",
        "                    }\n",
        "                    \n",
        "                    if (!expiryGroups[expiryDate]) {\n",
        "                        expiryGroups[expiryDate] = {\n",
        "                            trading: null,\n",
        "                            quote: null\n",
        "                        };\n",
        "                    }\n",
        "                    \n",
        "                    if (seriesName.includes('Trading Price')) {\n",
        "                        expiryGroups[expiryDate].trading = point.y;\n",
        "                    } else if (seriesName.includes('Quote')) {\n",
        "                        expiryGroups[expiryDate].quote = point.y;\n",
        "                    }\n",
        "                });\n",
        "                \n",
        "                let html = `<div style=\"font-family: Inter; padding: 8px;\">\n",
        "                    <div style=\"font-weight: bold; margin-bottom: 8px;\">${formattedDate}</div>`;\n",
        "                \n",
        "                Object.entries(expiryGroups).forEach(([expiryDate, values]) => {\n",
        "                    html += `<div style=\"margin-top: 8px;\">\n",
        "                        <div style=\"font-weight: bold; color: #666;\">Expiry: ${expiryDate}</div>`;\n",
        "                    \n",
        "                    if (values.trading !== null) {\n",
        "                        html += `<div style=\"color: #2f7ed8; margin: 2px 0;\">\n",
        "                            Trading: ${(values.trading * 100).toFixed(1)}%</div>`;\n",
        "                    }\n",
        "                    \n",
        "                    if (values.quote !== null) {\n",
        "                        html += `<div style=\"color: #0d233a; margin: 2px 0;\">\n",
        "                            Quote: ${(values.quote * 100).toFixed(1)}%</div>`;\n",
        "                    }\n",
        "                    \n",
        "                    if (values.trading !== null && values.quote !== null) {\n",
        "                        const diff = values.trading - values.quote;\n",
        "                        const diffColor = diff > 0 ? '#059669' : '#EC4899';\n",
        "                        html += `<div style=\"color: ${diffColor}; margin: 2px 0;\">\n",
        "                            Difference: ${(diff > 0 ? '+' : '')}${(diff * 100).toFixed(1)}%</div>`;\n",
        "                    }\n",
        "                    \n",
        "                    html += '</div>';\n",
        "                });\n",
        "                \n",
        "                html += '</div>';\n",
        "                return html;\n",
        "            }\n",
        "        },\n",
        "        \n",
        "        plotOptions: {\n",
        "            series: {\n",
        "                marker: {\n",
        "                    enabled: false,\n",
        "                    states: {\n",
        "                        hover: {\n",
        "                            enabled: true,\n",
        "                            radius: 4\n",
        "                        }\n",
        "                    }\n",
        "                },\n",
        "                states: {\n",
        "                    hover: {\n",
        "                        enabled: true,\n",
        "                        lineWidth: 4\n",
        "                    }\n",
        "                }\n",
        "            }\n",
        "        },\n",
        "        \n",
        "        legend: {\n",
        "            align: 'center',\n",
        "            verticalAlign: 'bottom',\n",
        "            layout: 'horizontal',\n",
        "            itemStyle: {\n",
        "                color: '#666',\n",
        "                fontWeight: '500',\n",
        "                fontFamily: 'Inter, sans-serif'\n",
        "            },\n",
        "        },\n",
        "        \n",
        "        series: processedData,\n",
        "        \n",
        "        credits: {\n",
        "            enabled: false\n",
        "        }\n",
        "    });\n",
        "});\n",
        "</script>\n",
        "\n",
        "\n",
        "```"
      ],
      "id": "871a8b30"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}